<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AscensionServer</name>
    </assembly>
    <members>
        <member name="M:AscensionServer.IActorManager.TryAdd(System.Byte,System.Int32,AscensionServer.AscensionPeer)">
            <summary>
            添加Actor
            </summary>
            <param name="id"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IActorManager.AddOrUpdate(System.Byte,System.Int32,AscensionServer.AscensionPeer)">
            <summary>
            添加或更新Actor;
            若存在，则更新；
            若不存在，则添加；
            </summary>
            <param name="id"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="P:AscensionServer.RedisConfig.Configuration">
             <summary>
            192.168.0.117:6379,password=123456,DefaultDatabase=3
             </summary>
        </member>
        <member name="M:AscensionServer.DatabaseQuerier.GetStringObject``1(System.String,System.Nullable{System.TimeSpan},AscensionServer.NHCriteria[])">
            <summary>
            获取一个对象；
            </summary>
            <typeparam name="T">存储的数据对象类型</typeparam>
            <param name="redisKey">redis存储的key</param>
            <param name="expiry">过期时间</param>
            <param name="columns">查询条件</param>
            <returns>查询到的数据对象</returns>
        </member>
        <member name="M:AscensionServer.DatabaseQuerier.InsertString``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            插入数据到redis，并更新mysql
            </summary>
            <typeparam name="T">存储的数据对象类型</typeparam>
            <param name="redisKey">redis存储的key</param>
            <param name="data">存储的数据</param>
            <param name="expiry">过期时间</param>
            <returns>成功存入后的数据对象</returns>
        </member>
        <member name="M:AscensionServer.DatabaseQuerier.UpdateString``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            更新数据到redis，并更新mysql
            </summary>
            <typeparam name="T">存储的数据对象类型</typeparam>
            <param name="redisKey">redis存储的key</param>
            <param name="data">存储的数据</param>
            <param name="expiry">过期时间</param>
        </member>
        <member name="M:AscensionServer.DatabaseQuerier.GetString``1(System.String,System.Nullable{System.TimeSpan},AscensionServer.NHCriteria[])">
            <summary>
            获取一个对象的string数据；
            </summary>
            <typeparam name="T">存储的数据对象类型</typeparam>
            <param name="redisKey">redis存储的key</param>
            <param name="expiry">过期时间</param>
            <param name="columns">查询条件</param>
            <returns>获取到的数据string</returns>
        </member>
        <member name="M:AscensionServer.DatabaseQuerier.InsertHash``1(System.String,System.String,``0)">
            <summary>
            存储一个hash数据
            </summary>
            <typeparam name="T">存储的数据对象类型</typeparam>
            <param name="key">redis主key</param>
            <param name="dataKey">rediskey对应的数据key</param>
            <param name="data">需要存储的数据对象</param>
            <returns>插入后的数据对象</returns>
        </member>
        <member name="M:AscensionServer.DatabaseQuerier.GetHashObject``1(System.String,System.String,AscensionServer.NHCriteria[])">
            <summary>
            获取hash数据对象
            </summary>
            <typeparam name="T">存储的数据对象类型</typeparam>
            <param name="key">redis主key</param>
            <param name="dataKey">rediskey对应的数据key</param>
            <param name="columns">需要查询的colums</param>
            <returns>查询到的对象</returns>
        </member>
        <member name="M:AscensionServer.DatabaseQuerier.DeleteHash``1(System.String,System.String,``0)">
            <summary>
            移除一个hash
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">redis主key</param>
            <param name="dataKey">rediskey对应的数据key</param>
            <param name="data">需要删除的数据对象</param>
        </member>
        <member name="M:AscensionServer.DatabaseQuerier.DeleteHashs``1(System.String,``0[],System.String[])">
            <summary>
            删除一组数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">redis主key</param>
            <param name="datas">myqsl中需要删除的数据条</param>
            <param name="dataKeys">rediskey对应的数据key</param>
        </member>
        <member name="T:AscensionServer.AllianceLevleUpData">
            <summary>
            建筑等级
            升级扩充人数
            每人维护消耗灵石
            每日维护消耗人气
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffData.isShow">
            <summary>
            用于面板显示，不用做数据
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.None">
            <summary>
            无触发条件
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.UseDesignatedSkill">
            <summary>
            使用指定技能
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.HaveDesignatedSkill">
            <summary>
            拥有指定技能
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.NotHaveDesignatedSkill">
            <summary>
            使用指定技能
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.LimitSkillTargetNum">
            <summary>
            技能目标数量限定
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.DesignatedDamageType">
            <summary>
            指定类型伤害
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.DamageCrit">
            <summary>
            伤害暴击
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.DesignatedPropertyLimit">
            <summary>
            指定属性限定
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.BothDesignatedPropertyCompare">
            <summary>
            双方指定属性比较
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.TargetHaveDesignatedBuff">
            <summary>
            目标存在指定buff
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.CharacterTypeLimit">
            <summary>
            角色类型限定
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffConditionType.CloseOrRangeAttack">
            <summary>
            近身或远程攻击
            </summary>
        </member>
        <member name="T:AscensionServer.BattleBuffCondition_TargetCharacterType">
            <summary>
            buff触发条件目标类型限定
            </summary>
        </member>
        <member name="T:AscensionServer.BattleBuffCondition_DamageType">
            <summary>
            伤害类型条件
            </summary>
        </member>
        <member name="T:AscensionServer.BattleBuffEventData">
            <summary>
            0角色属性变动 RolePropertyChange=>
            1buff属性变动 BuffPropertyChange=>
            2禁用buff ForbiddenBuff=>
            3角色状态改变 RoleStateChange=>
            4使用指定技能 UseDesignateSkill=>
            5伤害或治疗 DamageOrHeal=>
            6护盾 Shield=>
            7该次伤害减免 DamageReduce=>
            8替他人承担伤害 TakeHurtForOther=>
            9施加buff AddBuff=>
            10驱散buff DispelBuff=>
            11无法复活 Resurgence=>
            </summary>
        </member>
        <member name="F:AscensionServer.BattleBuffEventData.eventTriggerCondition">
            <summary>
            每个事件可能有一个附加的触发条件
            </summary>
        </member>
        <member name="T:AscensionServer.BuffEvent_RolePropertyChange_SourceDataType">
            <summary>
            buff事件：人物属性变动对应的数据来源类型
            </summary>
        </member>
        <member name="T:AscensionServer.BuffEvent_PropertyChangeType">
            <summary>
            buff事件：buff属性改变类型
            </summary>
        </member>
        <member name="T:AscensionServer.BuffEvent_RoleStateChangeType">
            <summary>
            buff事件：修改人物状态类型
            </summary>
        </member>
        <member name="T:AscensionServer.BuffEvent_DamageOrHeal_ChangeDataType">
            <summary>
            buff事件：伤害或治疗改变的数据类型
            </summary>
        </member>
        <member name="T:AscensionServer.BuffEvent_DamageOrHeal_SourceDataType">
            <summary>
            buff事件：伤害或治疗数值的数据来源类型
            </summary>
        </member>
        <member name="T:AscensionServer.BuffEvent_Shield_SourceDataType">
            <summary>
            buff事件：护盾的数据来源类型
            </summary>
        </member>
        <member name="T:AscensionServer.BattleSkillData">
            <summary>
             2020.11.06 09.50
            </summary>
            技能系统 对应的实体类
        </member>
        <member name="F:AscensionServer.BattleSkillData.TargetNumber">
            <summary>
            技能目标数
            </summary>
        </member>
        <member name="F:AscensionServer.BattleSkillData.damageAddition">
            <summary>
            伤害加成
            </summary>
        </member>
        <member name="F:AscensionServer.BattleSkillData.critProp">
            <summary>
            暴击率
            </summary>
        </member>
        <member name="F:AscensionServer.BattleSkillData.critDamage">
            <summary>
            暴击伤害
            </summary>
        </member>
        <member name="F:AscensionServer.BattleSkillData.ignoreDefensive">
            <summary>
            忽视防御
            </summary>
        </member>
        <member name="F:AscensionServer.BattleSkillData.IsCloseAttack">
            <summary>
            0=>近战,1=>远程
            </summary>
        </member>
        <member name="F:AscensionServer.BattleSkillData.battleSkillDamageNumDataList">
            <summary>
            伤害系数列表
            </summary>
        </member>
        <member name="T:AscensionServer.BattleSkillUseCondition">
            <summary>
            战斗技能使用条件 
            </summary>
        </member>
        <member name="T:AscensionServer.BattleSkillDamageNumData">
            <summary>
            一段伤害具体数据
            </summary>
        </member>
        <member name="F:AscensionServer.BattleSkillDamageNumData.fixedNum">
            <summary>
            数值基础系数
            </summary>
        </member>
        <member name="F:AscensionServer.BattleSkillAddBuffData.TargetType">
            <summary>
            目标类型：0=>受击方,1=>自身
            </summary>
        </member>
        <member name="F:AscensionServer.BattleSkillAddBuffProbability.addOrReduce">
            <summary>
            buff是加成或减少：0=>减少,1=>加成
            </summary>
        </member>
        <member name="T:AscensionServer.BottleneckData">
            <summary>
            角色等级 
            灵根数
            天雷类型
            雷劫回合数
            </summary>
        </member>
        <member name="T:AscensionServer.CreatAllianceData">
            <summary>
            创建宗门所需条件，及创建初始化数据
            </summary>
        </member>
        <member name="T:AscensionServer.DemonData">
            <summary>
            角色等级
            煞气值
            触发几率
            心魔ID
            </summary>
        </member>
        <member name="T:AscensionServer.DrugData">
            <summary>
            丹药的实体类
            </summary>
        </member>
        <member name="T:AscensionServer.DrugType">
            <summary>
            1.恢复气血
            2.恢复真元
            3.增加宠物经验
            4.自己修炼速度增加
            5.提高突破概率
            6.增加修炼数值
            7.增加BUFF
            8.复活
            9.增加宠物资质
            </summary>
        </member>
        <!-- 对于成员“T:AscensionServer.Faction_LevelType”忽略有格式错误的 XML 注释 -->
        <member name="T:AscensionServer.FactionItemType">
            <summary>
            藏宝阁主库
            丹药区
            图纸区
            灵兽区
            其他区
            </summary>
        </member>
        <member name="P:AscensionServer.ItemBagBaseData.ItemID">
             <summary>
            物品的唯一id
             </summary>
        </member>
        <member name="P:AscensionServer.ItemBagBaseData.Id">
            <summary>
             全局id
            </summary>
        </member>
        <member name="T:AscensionServer.ItemType">
            <summary>
            物品种类
            1.全部
            2.法宝
            3.消耗品
            4.材料
            5.最近获取
            </summary>
        </member>
        <member name="T:AscensionServer.ItemQuality">
            <summary>
            物品品质
            1.普通的
            2.稀有的
            3.非常稀有的
            4.史诗的
            5.传说的
            </summary>
        </member>
        <member name="T:AscensionServer.MapResourceData">
            <summary>
            野外历练资源数据集对象
            </summary>
        </member>
        <member name="T:AscensionServer.MagicWeaponData">
            <summary>
            法宝的实体类
            </summary>
        </member>
        <member name="T:AscensionServer.EquipType">
            <summary>
            装备的分类
            1.武器
            2.外衣
            3.内甲
            4、鞋子
            5.装备栏
            6.装备栏
            7.储物袋
            8.灵兽袋
            9.法宝
            10.默认值
            </summary>
        </member>
        <member name="T:AscensionServer.MiShuData">
            <summary>
            秘术的ID
            秘术基础数值列表
            </summary>
        </member>
        <member name="T:AscensionServer.MishuSkillData">
            <summary>
            秘术详细数值类
            yzq添加
            </summary>
        </member>
        <member name="T:AscensionServer.RunesData">
            <summary>
            针对符箓实体类
            </summary>
        </member>
        <member name="T:AscensionServer.CommandEventCore">
            <summary>
            指令事件EventCore；
            byte表示 ProtocolDefine.OPERATION中的操作码
            </summary>
        </member>
        <member name="T:AscensionServer.GameArea">
            <summary>
            游戏模块分区
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.GameApplication">
            <summary>
            游戏应用设置；
            十进制：1
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Login">
            <summary>
            登录；
            十进制：2
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Chat">
            <summary>
            聊天；
            十进制：3
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.RoleStatus">
            <summary>
            角色数据状态；
            十进制：4
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Cultivate">
            <summary>
            历练；
            十进制：5
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.SpiritBeasts">
            <summary>
            灵兽；
            十进制：6
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.NoviceGuide">
            <summary>
            新手引导；
            十进制：7
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Battle">
            <summary>
            战斗；
            十进制：8
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Gangs_School">
            <summary>
            新宗门；
            十进制：9
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.SecondaryJob">
            <summary>
            副职业；
            十进制：10
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Inventory">
            <summary>
            背包；
            十进制：11
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Adventure">
            <summary>
            历练；
            十进制：12
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.SecretArea">
            <summary>
            秘境；
            十进制：13
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.FlyMagicTool">
            <summary>
            飞行法器；
            十进制：14
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Activity">
            <summary>
            活动；
            十进制：15
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Shop">
            <summary>
            商场；
            十进制：16
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Friend">
            <summary>
            好友；
            十进制：17
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Match_CompareNotes">
            <summary>
            匹配/切磋；
            十进制：18
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Repository">
            <summary>
            仓库；
            十进制：19
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Team">
            <summary>
            组队；
            十进制：20
            </summary>
        </member>
        <member name="F:AscensionServer.GameArea.Currency">
            <summary>
            货币系统；
            十进制：21
            </summary>
        </member>
        <member name="M:AscensionServer.RecordHelper.RecordRole(AscensionServer.RoleEntity)">
            <summary>
            记录离线时间
            </summary>
            <param name="roleId">离线账号</param>
            <param name="data">新上线账号</param>
        </member>
        <member name="T:AscensionServer.RedisData.ReidsDataProcessing">
            <summary>
            数据库数据的向Redis储存的处理类
            </summary>
        </member>
        <member name="M:AscensionServer.RedisData.ReidsDataProcessing.GetRedisData(System.String,System.Int32)">
            <summary>
            获取Redis中储存的String
            </summary>
            <param name="key">对应的RedisKeyDefine中的值</param>
            <param name="RoleID"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.RedisData.ReidsDataProcessing.GetRedisData``1(System.String,System.Int32)">
            <summary>
            获取redis中储存的Hash
            </summary>
            <typeparam name="T">获取的对象类型</typeparam>
            <param name="key">对应的RedisKeyDefine中的值</param>
            <param name="RoleID"></param>
            <returns></returns>
        </member>
        <member name="T:AscensionServer.RedisKeyDefine">
            <summary>
            Postfix(后缀);
            Perfix(前缀)； 
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._SkillLayoutPerfix">
            <summary>
            类历练技能槽按钮持久化key前缀；
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._CultivatiionMethodPerfix">
            <summary>
            功法的key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RolePostfix">
            <summary>
            角色的Ke前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._MiShuPerfix">
            <summary>
            秘术的Key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleMiShuPerfix">
            <summary>
            角色秘术的Key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._PetPerfix">
            <summary>
            宠物的Key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._PetStatusPerfix">
            <summary>
            宠物属性的Key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._PetAptitudePerfix">
            <summary>
            宠物资质的Key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._PetAbilityPointPerfix">
            <summary>
            宠物加点的Key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._PuppetPerfix">
            <summary>
            傀儡的Key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._AlchemyPerfix">
            <summary>
            炼丹的Key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._ForgePerfix">
             <summary>
            锻造的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._ArrayPerfix">
             <summary>
            阵法的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RunesPerfix">
             <summary>
            制符的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._FieldPerfix">
             <summary>
            灵田的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._ShopPerfix">
             <summary>
            商店的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._VareityShopPerfix">
             <summary>
            杂货铺的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._AllianceListPerfix">
             <summary>
            仙盟列表的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._AllianceSigninPerfix">
             <summary>
            仙盟签到的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RefreshAllianceSigninPerfix">
             <summary>
            仙盟签到的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._AlliancePerfix">
             <summary>
            仙盟的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleAlliancePerfix">
             <summary>
            个人仙盟数据的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._AllianceConstructionPerfix">
             <summary>
            仙盟建设的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._AllianceExchangeGoodsPerfix">
             <summary>
            仙盟设置的兑换Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleAllianceSkillPerfix">
             <summary>
            角色仙盟技能的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._AllianceMemberPerfix">
             <summary>
            仙盟成员的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._DailyMessagePerfix">
             <summary>
            仙盟内广播的消息内容的Key前缀
             </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._DeldteTacticalPerfix">
            <summary>
            阵法记录删除回调的key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleStatsuPerfix">
            <summary>
            角色属性值的key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleGongfaPerfix">
            <summary>
            角色功法的key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._GongfaPerfix">
            <summary>
            功法的key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RolePetPerfix">
            <summary>
            角色所有宠物的key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleAssetsPerfix">
            <summary>
            角色所有宠物的key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleFlyMagicToolPerfix">
            <summary>
            角色所有飞行法器的key前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._WildMapResPerfix">
            <summary>
            历练地图资源后缀；
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._SecretMapResPerfix">
            <summary>
            秘境地图资源前缀
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._PetDrugRefreshPostfix">
            <summary>
            宠物使用丹药每日刷新
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._AlchemyPostfix">
            <summary>
            副职业炼丹
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleOnOffLinePostfix">
            <summary>
            角色修炼功法秘书记录
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleBottleneckPostfix">
            <summary>
            角色瓶颈触发
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._RoleAbilityPointPostfix">
            <summary>
            角色属性加点
            </summary>
        </member>
        <member name="F:AscensionServer.RedisKeyDefine._AllianceDongFuPostfix">
            <summary>
            宗門所有洞府信息
            </summary>
        </member>
        <member name="T:AscensionServer.DataStream">
            <summary>
            数据流对象
            </summary>
        </member>
        <member name="P:AscensionServer.DataStream.CanWrite">
            <summary>
            是否正在写入数据；
            </summary>
        </member>
        <member name="P:AscensionServer.DataStream.CanRead">
            <summary>
            是否正在读取数据；
            </summary>
        </member>
        <member name="F:AscensionServer.DataStream.writeData">
            <summary>
            写入的数据；
            </summary>
        </member>
        <member name="F:AscensionServer.DataStream.readData">
            <summary>
            读取的数据；
            </summary>
        </member>
        <member name="F:AscensionServer.DataStream.pos">
             <summary>
             serial number
            当前 data序号
             </summary>
        </member>
        <member name="M:AscensionServer.DataStream.SetReadStream(System.Object[],System.Int32)">
            <summary>
            设置读取的流
            </summary>
            <param name="incomingData">进入流的数据</param>
            <param name="pos">序列号</param>
        </member>
        <member name="M:AscensionServer.DataStream.SetWriteStream(System.Collections.Generic.List{System.Object},System.Int32)">
            <summary>
            设置写入的流
            </summary>
            <param name="newWriteData">进入流的数据</param>
            <param name="pos">序列号</param>
        </member>
        <member name="M:AscensionServer.DataStream.ReadNext">
            <summary>
            写入状态使用；
            顺序读取写入的下一个顺序；
            </summary>
            <returns>写入的下一个数据</returns>
        </member>
        <member name="M:AscensionServer.DataStream.ToArray">
            <summary>
            获取接收到的数据数组；
            若写入状态，则获得写入的数据；
            若读取状态，则获得读取的数据；
            </summary>
            <returns>数据数组</returns>
        </member>
        <member name="F:AscensionServer.DataStreamQueue.snd_rate">
            <summary>
            发送间隔
            </summary>
        </member>
        <member name="F:AscensionServer.DataStreamQueue.packetCount">
            <summary>
            消息总数
            </summary>
        </member>
        <member name="F:AscensionServer.DataStreamQueue.objectPerPacket">
            <summary>
            每个数据包所包含的消息数；
            </summary>
        </member>
        <member name="F:AscensionServer.DataStreamQueue.ts">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="F:AscensionServer.DataStreamQueue.rcv_nxt">
            <summary>
            下一个接收的序号
            </summary>
        </member>
        <member name="F:AscensionServer.DataStreamQueue.isWriting">
            <summary>
            是否可写入；
            </summary>
        </member>
        <member name="F:AscensionServer.AlliancelogicManager.alliancePoolDict">
            <summary>
            储存登录盟主的字典，用于派发申请消息
            </summary>
        </member>
        <member name="M:AscensionServer.AlliancelogicManager.GetNHCriteria``1(System.String,System.Int32)">
            <summary>
            用于查询数据库数据的整合的函数
            </summary>
            <typeparam name="T">所需查询的类型</typeparam>
            <param name="keyname">映射的变量名</param>
            <param name="key">对应的id</param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.AlliancelogicManager.JointDate(AscensionServer.Model.Role,AscensionServer.Model.School)">
            <summary>
            仙盟的申请整合方法
            </summary>
            <param name="role"></param>
            <param name="schoolDTO"></param>
            <returns></returns>
        </member>
        <member name="T:AscensionServer.ActorManager">
            <summary>
            Actor类型为Peer类型
            </summary>
        </member>
        <member name="F:AscensionServer.ActorManager.actorPoolDict">
            <summary>
            Peer类型的Actor
            </summary>
        </member>
        <member name="M:AscensionServer.ActorManager.TryAdd(System.Byte,System.Int32,AscensionServer.AscensionPeer)">
            <summary>
            添加Actor
            </summary>
            <param name="id"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ActorManager.AddOrUpdate(System.Byte,System.Int32,AscensionServer.AscensionPeer)">
            <summary>
            添加或更新Actor;
            若存在，则更新；
            若不存在，则添加；
            </summary>
            <param name="id"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.AuctionManager.ServerAuctionGoodsGet(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取拍卖品
            </summary>
        </member>
        <member name="M:AscensionServer.AuctionManager.SeverAuctionGoodsBuy(AscensionProtocol.DTO.AuctionGoodsDTO,System.Int32,System.Int32,System.Int32)">
            <summary>
            购买拍卖品
            </summary>
        </member>
        <member name="M:AscensionServer.AuctionManager.SeverAuctionGoodsPutAway(AscensionProtocol.DTO.AuctionGoodsDTO,System.Int32,System.Int32)">
            <summary>
            上架拍卖品
            </summary>
        </member>
        <member name="M:AscensionServer.AuctionManager.GetAuctionGoodsList(System.Int32)">
            <summary>
            获取某一种物品的所有物品信息
            </summary>
            <param name="auctionGoodsID"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.AuctionManager.GetTargetAuctionGoodList(System.Collections.Generic.List{AscensionProtocol.DTO.AuctionGoodsDTO},System.Int32,System.Int32)">
            <summary>
            获取目标范围的商品信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.AuctionManager.BuyAuctionGoods(AscensionProtocol.DTO.AuctionGoodsDTO,System.Int32)">
            <summary>
            玩家购买物品的事件处理
            </summary>
            <param name="buyAuctionGoodsDTO"></param>
            0=》别人购买中
            1=>商品不存在
            2=》数量不足
            3=》购买成功
            4=》意外情况
        </member>
        <member name="M:AscensionServer.AuctionManager.ChangeRoleAssets(System.Int32,System.Int32,System.Int32)">
            <summary>
            改变玩家金钱
            </summary>
            <param name="spiritStonePrice"></param>
            <param name="xianYuPrice"></param>
            <param name="targetRoleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.AuctionManager.PutAwayAuctionGoods(AscensionProtocol.DTO.AuctionGoodsDTO,System.Int32)">
            <summary>
            玩家上架拍卖品的事件
            </summary>
        </member>
        <member name="M:AscensionServer.IAuctionManager.SeverAuctionGoodsBuy(AscensionProtocol.DTO.AuctionGoodsDTO,System.Int32,System.Int32,System.Int32)">
            <summary>
            购买拍卖品
            </summary>
        </member>
        <member name="M:AscensionServer.IAuctionManager.SeverAuctionGoodsPutAway(AscensionProtocol.DTO.AuctionGoodsDTO,System.Int32,System.Int32)">
            <summary>
            上架拍卖品
            </summary>
        </member>
        <member name="M:AscensionServer.IAuctionManager.GetAuctionGoodsList(System.Int32)">
            <summary>
            获取某一种物品的所有物品信息
            </summary>
            <param name="auctionGoodsID"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IAuctionManager.GetTargetAuctionGoodList(System.Collections.Generic.List{AscensionProtocol.DTO.AuctionGoodsDTO},System.Int32,System.Int32)">
            <summary>
            获取目标范围的商品信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IAuctionManager.BuyAuctionGoods(AscensionProtocol.DTO.AuctionGoodsDTO,System.Int32)">
            <summary>
            玩家购买物品的事件处理
            </summary>
            <param name="buyAuctionGoodsDTO"></param>
            0=》别人购买中
            1=>商品不存在
            2=》数量不足
            3=》购买成功
            4=》意外情况
        </member>
        <member name="M:AscensionServer.IAuctionManager.ChangeRoleAssets(System.Int32,System.Int32,System.Int32)">
            <summary>
            改变玩家金钱
            </summary>
            <param name="spiritStonePrice"></param>
            <param name="xianYuPrice"></param>
            <param name="targetRoleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IAuctionManager.PutAwayAuctionGoods(AscensionProtocol.DTO.AuctionGoodsDTO,System.Int32)">
            <summary>
            玩家上架拍卖品的事件
            </summary>
        </member>
        <member name="T:AscensionServer.IBattleAlgorithmProvider">
            <summary>
            战斗算法提供者；
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.RandomManager(System.Int32,System.Int32,System.Int32)">
            <summary>
            针对战斗中的随机数
            </summary>
            <param name="ov"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.IsToSkillForm(System.Int32)">
            <summary>
            判断技能功法秘术是不是存在json 数据表格里
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.SkillFormToSkillObject(System.Int32)">
            <summary>
            返回 一个存在的技能对象
            </summary>
            <param name="targerId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PropsInstrutionFormToObject(System.Int32)">
            <summary>
            针对 道具中得 丹药和符箓
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.MagicWeaponFormToObject(System.Int32)">
            <summary>
            针对 法宝
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.SkillActionDifferentCmd(AscensionProtocol.DTO.BattleCmd,System.Int32,System.Int32)">
            <summary>
            不同技能行为的Cmd
            </summary>
            <param name="battleCmd"></param>
            <param name="roleId"></param>
            <param name="roomId"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.SkillFormToObject(System.Int32)">
            <summary>
            判断释放的技能是不是存在json中
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.MonsterFormToObject(System.Int32)">
            <summary>
            判断ai 是不是存在json中
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.ServerToClientResult(AscensionProtocol.DTO.TargetInfoDTO)">
            <summary>
            返回给客户端的计算伤害
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.ServerToClientResults(AscensionProtocol.DTO.TargetInfoDTO)">
            <summary>
            计算多段伤害用的
            </summary>
            <param name="targetInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.AlToSurvival(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.BattleSkillData)">
            <summary>
            2020.11.06 12:00
            筛选出来存活的Ai
            </summary>
            <param name="battleTransferDTOs"></param>
            <param name="roleId"></param>
            <param name="info"></param>
            <param name="skillGongFa"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PlayerToSKillRelease(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,System.Int32)">
             <summary>
            玩家出手 释放技能
             </summary>
             <param name="battleTransferDTOs"></param>
             <param name="roleId"></param>
             <param name="special"></param>
             <param name="petId"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PlayerToSkillDamage(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.BattleSkillData,System.Int32)">
            <summary>
            2020 . 11 . 06 13：17
            针对功法  玩家释放  不同技能类型的技能计算伤害
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.TeamIdToBattleInitData">
            <summary>
             角色id 和对应的 房间数据对象  缓存数据  2020 11：30 09.36
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.TeamIdToBattleInit">
            <summary>
             角色id 和对应的 房间数据对象
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.RoomidToBattleTransfer">
            <summary>
            房间id， 每回合战斗传输数据对象
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.RoomidToTimer">
            <summary>
            房间id，对应每回合的倒计时     这个是应对 每回合的战斗
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.TeamidToTimer">
            <summary>
            队伍id， 对应每个队伍的倒计时
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.OldBattleList">
            <summary>
            回收房间
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.TeamSet">
            <summary>
            收集每个回合的传输数据
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.RoleBattleTime">
            <summary>
            代表的是倒计时  毫秒
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.RecordRoomId">
            <summary>
            记录单人每回合 房间id
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.RecordTeamId">
            <summary>
            记录队伍id
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.RecordTeamRooomId">
            <summary>
            记录组队的时候房间id
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.TeamIdToMemberDict">
            <summary>
            队伍id 和 队伍成员id
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.TeamIdToRoomId">
            <summary>
            队伍id 和 房间id
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.BuffToRoomIdBefore">
            <summary>
            房间id 对应的每个回合的buff前
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.BuffToRoomIdAfter">
            <summary>
            房间id 对应的每个回合的buff后
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.MsqInfo``1(System.Int32)">
            <summary>
            映射  Msq
            </summary>
            <typeparam name="T"></typeparam>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.MsqInfoPet``1(System.Int32,System.String)">
            <summary>
            针对宠物  ID  PetID
            </summary>
            <typeparam name="T"></typeparam>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.IsTeamDto(System.Int32)">
            <summary>
            判断是不是在队伍中
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleInitObject(System.Int32)">
            <summary>
            返回初始化 数据对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleInitDataObject(System.Int32)">
            <summary>
            返回初始化 数据对象 缓存数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.RoleInfo(System.Int32)">
            <summary>
            获取玩家 并初始化
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PetInfo(System.Int32)">
            <summary>
            获取宠物  并初始化
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.EnemyInfo(System.Collections.Generic.List{AscensionProtocol.DTO.EnemyBattleDataDTO})">
            <summary>
            获取AI 并初始化
            </summary>
            <param name="enemyId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.AllBattleDataDTOsInfo(System.Int32,AscensionProtocol.DTO.BattleInitDTO)">
            <summary>
            玩家宠物AI  初始化所有信息  应对出手速度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PlayerBattleEndInfo(System.Int32,AscensionProtocol.DTO.RoleStatusDTO)">
            <summary>
            针对 玩家战斗结束的同步数据
            </summary>
            <param name="roleId"></param>
            <param name="roleStatusSever"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.InitBattle(System.Int32)">
            <summary>
            针对 单人和组队  服务器给客户端 发送初始化数据
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.InitServerToClient(System.Int32)">
            <summary>
            战斗初始化 参数服务器 返回给客户端
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.RoundServerToClient">
            <summary>
            每回合 战斗 技能计算 参数服务器 返回给客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.RoundRunAwayServerToClient(System.Boolean)">
            <summary>
            每回合 战斗 技能逃跑计算 参数服务器返回给客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.DamageCalculation(System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Int32)">
            <summary>
            /AI伤害计算公式
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.DamageCalculation(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO)">
            <summary>
            /玩家伤害计算公式
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.SkillSingleOrStaged(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.BattleSkillData,System.Int32)">
            <summary>
            2020.11.06 20:06
            统一计算技能 单段 多段
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.AddBufferMethod(System.Collections.Generic.List{AscensionServer.BattleSkillAddBuffData},System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
            <summary>
            技能 添加buff
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.RemoveBufferMethod(System.Collections.Generic.List{AscensionServer.BattleSkillRemoveBuffData},System.Int32,System.Int32,System.Int32)">
            <summary>
            技能 移除buff
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleSkillEventDataMethod(System.Collections.Generic.List{AscensionServer.BattleSkillEventData},System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
             <summary>
            技能触发时机
             </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.battleSkillEventTriggerCondition(AscensionServer.BattleSkillEventData,System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,AscensionProtocol.DTO.RoleBattleDataDTO,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
            <summary>
             技能 触发来源
            </summary>
            <param name="battleSkillEvents"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="enemySetObject"></param>
            <param name="targetInfoDTOsSet"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.battleSkillEventTriggerNumSourceType(AscensionServer.BattleSkillEventData,System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,AscensionProtocol.DTO.RoleBattleDataDTO,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
            <summary>
            技能触发条件
            </summary>
            <param name="battleSkillEvents"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="enemySetObject"></param>
            <param name="targetInfoDTOsSet"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.battleSkillTriggerEventType(AscensionServer.BattleSkillEventData,System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,AscensionProtocol.DTO.RoleBattleDataDTO,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
            <summary>
            技能触发事件类型
            </summary>
            <param name="battleSkillEvents"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="enemySetObject"></param>
            <param name="targetInfoDTOsSet"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PlayerToSkillReturnBlood(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.BattleSkillData)">
            <summary>
            2020.11.06 20:45
            统一技能治疗术
            </summary>
            <param name="battleTransferDTOs"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="battleSkillData"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PlayerToPetID(System.Int32)">
            <summary>
            2020 11.07 17:21
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.SelectToTarget(System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO},System.String,System.Object,System.Collections.Generic.List{AscensionServer.BattleSkillDamageNumData},System.Int32,System.Collections.Generic.List{AscensionServer.BattleSkillAddBuffData},System.Collections.Generic.List{AscensionServer.BattleSkillRemoveBuffData},System.Int32,System.Int32)">
            <summary>
            2020 11.07  18:00
            选择回血的目标
            </summary>
            <param name="targetInfoDTOsSet"></param>
            <param name="typeName"></param>
            <param name="objectOwner"></param>
            <param name="bSD"></param>
            <param name="ol"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PlayerToMagicWeapen(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32)">
            <summary>
            针对法宝的使用
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.RunesDataToUser(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.RunesData)">
            <summary>
            符箓的使用
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.DrugDataToUser(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.DrugData)">
            <summary>
            丹药的使用
            </summary>
            <param name="battleTransferDTOs"></param>
            <param name="roleId"></param>
            <param name="drugData"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PlayerToRunAway(AscensionProtocol.DTO.BattleTransferDTO,System.Int32)">
            <summary>
            针对  单人逃跑的 返回计算处理
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PetToRunAway(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32)">
            <summary>
            针对 宠物逃跑的 返回计算处理
            </summary>
            <param name="battleTransferDTOs"></param>
            <param name="roleId"></param>
            <param name="petId"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PlayerTeamToRunAway(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            组队逃跑   可以和并成一个 和单人逃跑的   需要去队伍中标记一下 是不是存在战斗中还是中途退出啦
            需要继续完善   ///TODO
            </summary>
            speed = -1 的话 代表这回合计算是宠物逃跑
        </member>
        <member name="M:AscensionServer.IServerBattleManager.TimestampBattleEnd(System.Int32)">
             <summary>
            针对每回合  开始倒计时
             </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.TimestampBattlePrepare(System.Int32)">
            <summary>
            针对初始化准备加载 倒计时
            </summary>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.TimestampBattleStart(System.Int32)">
            <summary>
            针对组队 开始之前倒计时
            </summary>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleIsDieCallBack(System.Int32)">
             <summary>
            每个回合倒计时 AI 玩家 是否死亡 战斗结束 发起事件 
             </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleTimerPrepareCallBack(System.Int32)">
            <summary>
            针对组队 战斗准备阶段倒计时  回调事件
            </summary>
            <param name="tempTeamId"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.RoundTeamMember(System.Int32,System.Int32,System.Int32)">
            <summary>
            针对 组队情况下的 不选取指令  随机分配一个默认指令     ??? 需要处理 不发消息的时候怎么办
            </summary>
        </member>
        <member name="P:AscensionServer.IServerBattleManager.IsTeamRunAway">
            <summary>
            针对每回合组队 技能释放计算 并返回给客户端
            </summary>
            <param name="tempRole"></param>
            <param name="teampRoomId"></param>
            <param name="tempTeamId"></param>
            
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BuffManagerMethod(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Int32,System.Boolean,System.Collections.Generic.List{AscensionProtocol.DTO.BufferBattleDataDTO},System.Int32)">
            <summary>
            buff的入口
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BuffConditionMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Boolean)">
            <summary>
            先判断buff 触发的条件
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BuffEventMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Boolean)">
            <summary>
            判断buff 触发事件
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
            <param name="buffDict"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BuffEventRolePropertyChangeMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Collections.Generic.List{AscensionServer.BattleBuffEventData},System.Int32,System.Boolean)">
             <summary>
            变动属性类型
             </summary>
             <param name="buffId"></param>
             <param name="roleId"></param>
             <param name="currentId"></param>
             <param name="playerSetObject"></param>
             <param name="enemySetObject"></param>
             <param name="buffDict"></param>
             <param name="buffEventSet"></param>
             <param name="i"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BuffEventSourceDataTypeMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Collections.Generic.List{AscensionServer.BattleBuffEventData},System.Int32,System.Boolean)">
            <summary>
            变动的数值来源
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
            <param name="buffDict"></param>
            <param name="buffEventSet"></param>
            <param name="i"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BuffEventDamageOrHealMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Collections.Generic.List{AscensionServer.BattleBuffEventData},System.Int32,System.Boolean)">
            <summary>
            伤害 或者治疗
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
            <param name="buffDict"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BuffEventResultsMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Collections.Generic.List{AscensionServer.BattleBuffEventData},System.Int32,System.Boolean)">
            <summary>
            buff作用于的目标具体计算
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
            <param name="buffDict"></param>
            <param name="buffEventSet"></param>
            <param name="i"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.ReleaseToSpeed(System.Int32)">
            <summary>
            出手速度
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.ReleaseToOwner(System.Int32,System.Int32,System.Int32)">
            <summary>
            返回一个出手拥有者  玩家或者AI或者宠物
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.AIToHPMethod(System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.EnemyBattleDataDTO})">
            <summary>
            针对AI  血量 >0
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PlayerToHPMethod(System.Int32,System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.RoleBattleDataDTO})">
            <summary>
            针对玩家  血量 >0
            </summary>
            <param name="roleId"></param>
            <param name="roleBattleDatas"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PetToHPMethod(System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.PetBattleDataDTO})">
            <summary>
            针对宠物 血量>0
            </summary>
            <param name="roleId"></param>
            <param name="petBattleDataDTOs"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.AIToRelease(AscensionProtocol.DTO.BattleTransferDTO,AscensionProtocol.DTO.EnemyStatusDTO,System.Int32,System.Int32,System.Int32)">
            <summary>
            处理AI 判断玩家是不是死亡 和要选择能出手的Ai                ??? TODO第四个参数有待完善
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleClear(System.Int32)">
            <summary>
            注意 每次进去之前先保证之前的数据都清除掉
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.EntryBattle(AscensionProtocol.DTO.BattleInitDTO)">
            <summary>
            初始化战斗数据  
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.PrepareBattle(System.Int32,System.Int32)">
            <summary>
            准备指令战斗 
            </summary>
        </member>
        <!-- 对于成员“M:AscensionServer.IServerBattleManager.BattleEnd(System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:AscensionServer.IServerBattleManager.BattleRunAway(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗逃跑
            </summary>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattlePropsInstrution(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗道具
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleMagicWeapen(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗法宝
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleCatchPet(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗捕捉
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleSummonPet(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗召唤
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="M:AscensionServer.IServerBattleManager.BattleDefend(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗防御指令
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="T:AscensionServer.ServerBattleManager">
            <summary>
            没统一的服务器战斗功能
            </summary>
            <summary>
            用于初始化 战斗数据 和管理 战斗的数据缓存
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BuffManagerMethod(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Int32,System.Boolean,System.Collections.Generic.List{AscensionProtocol.DTO.BufferBattleDataDTO},System.Int32)">
            <summary>
            buff的入口
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BuffConditionMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Boolean)">
            <summary>
            先判断buff 触发的条件
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BuffEventMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Boolean)">
            <summary>
            判断buff 触发事件
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
            <param name="buffDict"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BuffEventRolePropertyChangeMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Collections.Generic.List{AscensionServer.BattleBuffEventData},System.Int32,System.Boolean)">
             <summary>
            变动属性类型
             </summary>
             <param name="buffId"></param>
             <param name="roleId"></param>
             <param name="currentId"></param>
             <param name="playerSetObject"></param>
             <param name="enemySetObject"></param>
             <param name="buffDict"></param>
             <param name="buffEventSet"></param>
             <param name="i"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BuffEventSourceDataTypeMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Collections.Generic.List{AscensionServer.BattleBuffEventData},System.Int32,System.Boolean)">
            <summary>
            变动的数值来源
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
            <param name="buffDict"></param>
            <param name="buffEventSet"></param>
            <param name="i"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BuffEventDamageOrHealMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Collections.Generic.List{AscensionServer.BattleBuffEventData},System.Int32,System.Boolean)">
            <summary>
            伤害 或者治疗
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
            <param name="buffDict"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BuffEventResultsMothed(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Collections.Generic.Dictionary{System.Int32,AscensionServer.BattleBuffData},System.Collections.Generic.List{AscensionServer.BattleBuffEventData},System.Int32,System.Boolean)">
            <summary>
            buff作用于的目标具体计算
            </summary>
            <param name="buffId"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="playerSetObject"></param>
            <param name="enemySetObject"></param>
            <param name="buffDict"></param>
            <param name="buffEventSet"></param>
            <param name="i"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.ReleaseToSpeed(System.Int32)">
            <summary>
            出手速度
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.ReleaseToOwner(System.Int32,System.Int32,System.Int32)">
            <summary>
            返回一个出手拥有者  玩家或者AI或者宠物
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.AIToHPMethod(System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.EnemyBattleDataDTO})">
            <summary>
            针对AI  血量 >0
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PlayerToHPMethod(System.Int32,System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.RoleBattleDataDTO})">
            <summary>
            针对玩家  血量 >0
            </summary>
            <param name="roleId"></param>
            <param name="roleBattleDatas"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PetToHPMethod(System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.PetBattleDataDTO})">
            <summary>
            针对宠物 血量>0
            </summary>
            <param name="roleId"></param>
            <param name="petBattleDataDTOs"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.AIToRelease(AscensionProtocol.DTO.BattleTransferDTO,AscensionProtocol.DTO.EnemyStatusDTO,System.Int32,System.Int32,System.Int32)">
            <summary>
            处理AI 判断玩家是不是死亡 和要选择能出手的Ai                ??? TODO第四个参数有待完善
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleClear(System.Int32)">
            <summary>
            注意 每次进去之前先保证之前的数据都清除掉
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.EntryBattle(AscensionProtocol.DTO.BattleInitDTO)">
            <summary>
            初始化战斗数据  
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PrepareBattle(System.Int32,System.Int32)">
            <summary>
            准备指令战斗 
            </summary>
        </member>
        <member name="F:AscensionServer.ServerBattleManager.isRunAway">
            <summary>
            开始战斗   -->  开始战斗的回合
            </summary>
            
        </member>
        <!-- 对于成员“M:AscensionServer.ServerBattleManager.BattleEnd(System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:AscensionServer.ServerBattleManager.BattleRunAway(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗逃跑
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattlePropsInstrution(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗道具
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleMagicWeapen(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗法宝
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleCatchPet(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗捕捉
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleSummonPet(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗召唤
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleDefend(System.Int32,System.Int32,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            战斗防御指令
            </summary>
            <param name="roleId"></param>
            <param name="roomId"></param>
            <param name="battleTransferDTOs"></param>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.TeamIdToBattleInitData">
            <summary>
             角色id 和对应的 房间数据对象  缓存数据  2020 11：30 09.36
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.TeamIdToBattleInit">
            <summary>
             角色id 和对应的 房间数据对象
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.RoomidToBattleTransfer">
            <summary>
            房间id， 每回合战斗传输数据对象
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.RoomidToTimer">
            <summary>
            房间id，对应每回合的倒计时     这个是应对 每回合的战斗
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.TeamidToTimer">
            <summary>
            队伍id， 对应每个队伍的倒计时
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.OldBattleList">
            <summary>
            回收房间
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.TeamSet">
            <summary>
            收集每个回合的传输数据
            </summary>
        </member>
        <member name="F:AscensionServer.ServerBattleManager.TargetID">
             <summary>
            玩家的行动目标  怪物的唯一id 对应全局id
             </summary>
        </member>
        <member name="F:AscensionServer.ServerBattleManager._roomId">
            <summary>
            房间id
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.RoleBattleTime">
            <summary>
            代表的是倒计时  毫秒
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.RecordRoomId">
            <summary>
            记录单人每回合 房间id
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.RecordTeamId">
            <summary>
            记录队伍id
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.RecordTeamRooomId">
            <summary>
            记录组队的时候房间id
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.TeamIdToMemberDict">
            <summary>
            队伍id 和 队伍成员id
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.TeamIdToRoomId">
            <summary>
            队伍id 和 房间id
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.BuffToRoomIdBefore">
            <summary>
            房间id 对应的每个回合的buff前
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.BuffToRoomIdAfter">
            <summary>
            房间id 对应的每个回合的buff后
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.MsqInfo``1(System.Int32)">
            <summary>
            映射  Msq
            </summary>
            <typeparam name="T"></typeparam>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.MsqInfoPet``1(System.Int32,System.String)">
            <summary>
            针对宠物  ID  PetID
            </summary>
            <typeparam name="T"></typeparam>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.IsTeamDto(System.Int32)">
            <summary>
            判断是不是在队伍中
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleInitObject(System.Int32)">
            <summary>
            返回初始化 数据对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleInitDataObject(System.Int32)">
            <summary>
            返回初始化 数据对象 缓存数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.RoleInfo(System.Int32)">
            <summary>
            获取玩家 并初始化
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PetInfo(System.Int32)">
            <summary>
            获取宠物  并初始化
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.EnemyInfo(System.Collections.Generic.List{AscensionProtocol.DTO.EnemyBattleDataDTO})">
            <summary>
            获取AI 并初始化
            </summary>
            <param name="enemyId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.AllBattleDataDTOsInfo(System.Int32,AscensionProtocol.DTO.BattleInitDTO)">
            <summary>
            玩家宠物AI  初始化所有信息  应对出手速度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PlayerBattleEndInfo(System.Int32,AscensionProtocol.DTO.RoleStatusDTO)">
            <summary>
            针对 玩家战斗结束的同步数据
            </summary>
            <param name="roleId"></param>
            <param name="roleStatusSever"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.InitBattle(System.Int32)">
            <summary>
            针对 单人和组队  服务器给客户端 发送初始化数据
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.InitServerToClient(System.Int32)">
            <summary>
            战斗初始化 参数服务器 返回给客户端
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.RoundServerToClient">
            <summary>
            每回合 战斗 技能计算 参数服务器 返回给客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.RoundRunAwayServerToClient(System.Boolean)">
            <summary>
            每回合 战斗 技能逃跑计算 参数服务器返回给客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.AlToSurvival(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.BattleSkillData)">
            <summary>
            2020.11.06 12:00
            筛选出来存活的Ai
            </summary>
            <param name="battleTransferDTOs"></param>
            <param name="roleId"></param>
            <param name="info"></param>
            <param name="skillGongFa"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PlayerToSKillRelease(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,System.Int32)">
             <summary>
            玩家出手 释放技能
             </summary>
             <param name="battleTransferDTOs"></param>
             <param name="roleId"></param>
             <param name="special"></param>
             <param name="petId"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PlayerToSkillDamage(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.BattleSkillData,System.Int32)">
            <summary>
            2020 . 11 . 06 13：17
            针对功法  玩家释放  不同技能类型的技能计算伤害
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.DamageCalculation(System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Int32)">
            <summary>
            /AI伤害计算公式
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.DamageCalculation(System.Int32,System.Int32,System.Int32,AscensionProtocol.DTO.RoleBattleDataDTO)">
            <summary>
            /玩家伤害计算公式
            </summary>
            <returns></returns>
        </member>
        <member name="F:AscensionServer.ServerBattleManager.buffToSkillId">
            buff  针对buff的技能id
        </member>
        <member name="M:AscensionServer.ServerBattleManager.SkillSingleOrStaged(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.BattleSkillData,System.Int32)">
            <summary>
            2020.11.06 20:06
            统一计算技能 单段 多段
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.AddBufferMethod(System.Collections.Generic.List{AscensionServer.BattleSkillAddBuffData},System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
            <summary>
            技能 添加buff
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.RemoveBufferMethod(System.Collections.Generic.List{AscensionServer.BattleSkillRemoveBuffData},System.Int32,System.Int32,System.Int32)">
            <summary>
            技能 移除buff
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleSkillEventDataMethod(System.Collections.Generic.List{AscensionServer.BattleSkillEventData},System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
             <summary>
            技能触发时机
             </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.battleSkillEventTriggerCondition(AscensionServer.BattleSkillEventData,System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,AscensionProtocol.DTO.RoleBattleDataDTO,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
            <summary>
             技能 触发来源
            </summary>
            <param name="battleSkillEvents"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="enemySetObject"></param>
            <param name="targetInfoDTOsSet"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.battleSkillEventTriggerNumSourceType(AscensionServer.BattleSkillEventData,System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,AscensionProtocol.DTO.RoleBattleDataDTO,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
            <summary>
            技能触发条件
            </summary>
            <param name="battleSkillEvents"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="enemySetObject"></param>
            <param name="targetInfoDTOsSet"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.battleSkillTriggerEventType(AscensionServer.BattleSkillEventData,System.Int32,System.Int32,AscensionProtocol.DTO.EnemyBattleDataDTO,AscensionProtocol.DTO.RoleBattleDataDTO,System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO})">
            <summary>
            技能触发事件类型
            </summary>
            <param name="battleSkillEvents"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="enemySetObject"></param>
            <param name="targetInfoDTOsSet"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PlayerToSkillReturnBlood(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.BattleSkillData)">
            <summary>
            2020.11.06 20:45
            统一技能治疗术
            </summary>
            <param name="battleTransferDTOs"></param>
            <param name="roleId"></param>
            <param name="currentId"></param>
            <param name="battleSkillData"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PlayerToPetID(System.Int32)">
            <summary>
            2020 11.07 17:21
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.SelectToTarget(System.Collections.Generic.List{AscensionProtocol.DTO.TargetInfoDTO},System.String,System.Object,System.Collections.Generic.List{AscensionServer.BattleSkillDamageNumData},System.Int32,System.Collections.Generic.List{AscensionServer.BattleSkillAddBuffData},System.Collections.Generic.List{AscensionServer.BattleSkillRemoveBuffData},System.Int32,System.Int32)">
            <summary>
            2020 11.07  18:00
            选择回血的目标
            </summary>
            <param name="targetInfoDTOsSet"></param>
            <param name="typeName"></param>
            <param name="objectOwner"></param>
            <param name="bSD"></param>
            <param name="ol"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PlayerToMagicWeapen(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32)">
            <summary>
            针对法宝的使用
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.RunesDataToUser(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.RunesData)">
            <summary>
            符箓的使用
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.DrugDataToUser(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,AscensionServer.DrugData)">
            <summary>
            丹药的使用
            </summary>
            <param name="battleTransferDTOs"></param>
            <param name="roleId"></param>
            <param name="drugData"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PlayerToRunAway(AscensionProtocol.DTO.BattleTransferDTO,System.Int32)">
            <summary>
            针对  单人逃跑的 返回计算处理
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PetToRunAway(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32)">
            <summary>
            针对 宠物逃跑的 返回计算处理
            </summary>
            <param name="battleTransferDTOs"></param>
            <param name="roleId"></param>
            <param name="petId"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PlayerTeamToRunAway(AscensionProtocol.DTO.BattleTransferDTO,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            组队逃跑   可以和并成一个 和单人逃跑的   需要去队伍中标记一下 是不是存在战斗中还是中途退出啦
            需要继续完善   ///TODO
            </summary>
            speed = -1 的话 代表这回合计算是宠物逃跑
        </member>
        <member name="M:AscensionServer.ServerBattleManager.TimestampBattleEnd(System.Int32)">
             <summary>
            针对每回合  开始倒计时
             </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.TimestampBattlePrepare(System.Int32)">
            <summary>
            针对初始化准备加载 倒计时
            </summary>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.TimestampBattleStart(System.Int32)">
            <summary>
            针对组队 开始之前倒计时
            </summary>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleIsDieCallBack(System.Int32)">
             <summary>
            每个回合倒计时 AI 玩家 是否死亡 战斗结束 发起事件 
             </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.BattleTimerPrepareCallBack(System.Int32)">
            <summary>
            针对组队 战斗准备阶段倒计时  回调事件
            </summary>
            <param name="tempTeamId"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.RoundTeamMember(System.Int32,System.Int32,System.Int32)">
            <summary>
            针对 组队情况下的 不选取指令  随机分配一个默认指令     ??? 需要处理 不发消息的时候怎么办
            </summary>
        </member>
        <member name="P:AscensionServer.ServerBattleManager.IsTeamRunAway">
            <summary>
            针对每回合组队 技能释放计算 并返回给客户端
            </summary>
            <param name="tempRole"></param>
            <param name="teampRoomId"></param>
            <param name="tempTeamId"></param>
            
        </member>
        <member name="M:AscensionServer.ServerBattleManager.RandomManager(System.Int32,System.Int32,System.Int32)">
            <summary>
            针对战斗中的随机数
            </summary>
            <param name="ov"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.IsToSkillForm(System.Int32)">
            <summary>
            判断技能功法秘术是不是存在json 数据表格里
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.SkillFormToSkillObject(System.Int32)">
            <summary>
            返回 一个存在的技能对象
            </summary>
            <param name="targerId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.PropsInstrutionFormToObject(System.Int32)">
            <summary>
            针对 道具中得 丹药和符箓
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.MagicWeaponFormToObject(System.Int32)">
            <summary>
            针对 法宝
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.SkillActionDifferentCmd(AscensionProtocol.DTO.BattleCmd,System.Int32,System.Int32)">
            <summary>
            不同技能行为的Cmd
            </summary>
            <param name="battleCmd"></param>
            <param name="roleId"></param>
            <param name="roomId"></param>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.SkillFormToObject(System.Int32)">
            <summary>
            判断释放的技能是不是存在json中
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.MonsterFormToObject(System.Int32)">
            <summary>
            判断ai 是不是存在json中
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.ServerToClientResult(AscensionProtocol.DTO.TargetInfoDTO)">
            <summary>
            返回给客户端的计算伤害
            </summary>
        </member>
        <member name="M:AscensionServer.ServerBattleManager.ServerToClientResults(AscensionProtocol.DTO.TargetInfoDTO)">
            <summary>
            计算多段伤害用的
            </summary>
            <param name="targetInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AscensionServer.BattleEndDelegateHandle">
             <summary>
            针对 每回合战斗倒计时结束 回调方法 
             </summary>
        </member>
        <member name="T:AscensionServer.BattlePrepareDelegateHandle">
            <summary>
            针对  战斗准备倒计时结束  
            </summary>
        </member>
        <member name="T:AscensionServer.BattleStartDelegateHandle">
            <summary>
            针对  组队 战斗开始的时候收集
            </summary>
        </member>
        <member name="T:AscensionServer.TargetType">
            <summary>
            技能目标类型
            </summary>
        </member>
        <member name="T:AscensionServer.TargetCount">
            <summary>
            攻击目标的数量
            </summary>
        </member>
        <member name="T:AscensionServer.DamageType">
            <summary>
            伤害的类型
            </summary>
        </member>
        <member name="T:AscensionServer.Battle_MoveType">
            <summary>
            移动的方式
            </summary>
        </member>
        <member name="T:AscensionServer.AttackProcess_Type">
            <summary>
            攻击的类型
            </summary>
        </member>
        <member name="F:AscensionServer.AttackProcess_Type.SingleUse">
            <summary>
            每段伤害一次性打完所有敌人
            </summary>
        </member>
        <member name="F:AscensionServer.AttackProcess_Type.Staged">
            <summary>
            分阶段打完伤害
            </summary>
        </member>
        <member name="T:AscensionServer.Skill_Type">
            <summary>
            技能类型
            1.攻击
            2.回血
            3.护盾
            4.buffer
            5.复活
            </summary>
        </member>
        <member name="T:AscensionServer.TimerManager">
            <summary>
            定时器类
            </summary>
        </member>
        <member name="F:AscensionServer.TimerManager._isTicking">
            <summary>
            是否在计时中
            </summary>
        </member>
        <member name="F:AscensionServer.TimerManager._currentTime">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="F:AscensionServer.TimerManager._endTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="M:AscensionServer.TimerManager.StartTimer">
            <summary>
            开始计时
            </summary>
        </member>
        <member name="M:AscensionServer.TimerManager.UpdateTimer(System.Single)">
            <summary>
            更新中
            </summary>
            <param name="delteTime"></param>
        </member>
        <member name="M:AscensionServer.TimerManager.StopTimer">
            <summary>
            停止计时
            </summary>
        </member>
        <member name="M:AscensionServer.TimerManager.ContinueTimer">
            <summary>
            持续计时
            </summary>
        </member>
        <member name="M:AscensionServer.TimerManager.ReStartTimer">
            <summary>
            重新计时
            </summary>
        </member>
        <member name="M:AscensionServer.TimerManager.ResetEndTimer(System.Single)">
            <summary>
            重新设定计时器
            </summary>
            <param name="second"></param>
        </member>
        <member name="M:AscensionServer.TimerToManager.StartTimer">
            <summary>
            应对 每回合战斗的开始时间
            </summary>
        </member>
        <member name="M:AscensionServer.TimerToManager.BattleMethodCallBack(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            绑定的回调事件
            </summary>
        </member>
        <member name="M:AscensionServer.TimerToManager.BattleEndStopTimer">
            <summary>
            停止时间
            </summary>
        </member>
        <member name="M:AscensionServer.TimerToManager.BattleEndCallBackMethod">
            <summary>
            处理回调
            </summary>
        </member>
        <member name="M:AscensionServer.TimerToManager.PrepareTimer">
            <summary>
            ，初始化 加载完毕  开始时间
            </summary>
        </member>
        <member name="M:AscensionServer.TimerToManager.BattlePrepareStopTimer">
            <summary>
            准备 停止时间
            </summary>
        </member>
        <member name="F:AscensionServer.DataManager.intervalSec">
            <summary>
            间隔秒；
            </summary>
        </member>
        <member name="F:AscensionServer.DataManager.typeObjectDict">
            <summary>
            对象字典；
            </summary>
        </member>
        <member name="F:AscensionServer.DataManager.jsonDict">
            <summary>
            json数据字典；
            </summary>
        </member>
        <member name="M:AscensionServer.DataManager.OnRefresh">
            <summary>
            覆写轮询函数；
            自动更新服务器数据类型；
            </summary>
        </member>
        <member name="M:AscensionServer.DataManager.TryGetValue(System.String,System.String@)">
            <summary>
            通过类名获取json数据；
            typeof(Data).Name可作为key；
            </summary>
            <param name="key">类名</param>
            <param name="value">json数据</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AscensionServer.IDataManager.TryGetValue(System.String,System.String@)">
            <summary>
            通过类名获取json数据；
            typeof(Data).Name可作为key；
            </summary>
            <param name="key">类名</param>
            <param name="value">json数据</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="T:AscensionServer.IDataProvider">
            <summary>
            允许多派生；
            只要继承自此类，并挂载[ImplementProviderAttribute]特性，皆可在初始化时加载数据；
            </summary>
        </member>
        <member name="M:AscensionServer.FlyMagicToolManager.ResultFailS2C(System.Int32,AscensionProtocol.FlyMagicToolOpCode)">
            <summary>
            失败返回
            </summary>
        </member>
        <member name="M:AscensionServer.FlyMagicToolManager.ResultSuccseS2C(System.Int32,AscensionProtocol.FlyMagicToolOpCode,System.Object)">
            <summary>
            结果成功返回
            </summary>
            <param name="roleID"></param>
            <param name="opcode"></param>
            <param name="data"></param>
        </member>
        <member name="M:AscensionServer.FlyMagicToolManager.AddFlyMagicToolS2C(AscensionProtocol.DTO.FlyMagicToolDTO)">
            <summary>
            添加新的飞行法器
            </summary>
        </member>
        <member name="M:AscensionServer.FlyMagicToolManager.GetFlyMagicToolS2C(AscensionProtocol.DTO.FlyMagicToolDTO)">
            <summary>
            获得任务所有飞行法器
            </summary>
            <param name="flyMagic"></param>
        </member>
        <member name="M:AscensionServer.FlyMagicToolManager.UpdateFlyMagicToolS2C(AscensionProtocol.DTO.FlyMagicToolDTO)">
            <summary>
            更新飞行法器状态更改人物属性数据
            </summary>
            <param name="flyMagic"></param>
        </member>
        <member name="M:AscensionServer.FlyMagicToolManager.GetFlyMagicToolMySql(AscensionProtocol.DTO.FlyMagicToolDTO)">
            <summary>
            获取MySql数据
            </summary>
        </member>
        <member name="M:AscensionServer.FlyMagicToolManager.flyMagicToolChange(AscensionServer.Model.FlyMagicTool)">
            <summary>
            类型转换
            </summary>
            <param name="flyMagic"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetAllianceConstructionS2C(System.Int32,System.Int32)">
            <summary>
            获得宗门属性及建设
            </summary>
            <param name="ID"></param>
            <param name="roleID"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.BuildAllianceConstructionS2C(System.Int32,System.Int32,AscensionProtocol.DTO.AllianceConstructionDTO)">
            <summary>
            宗门建筑升级
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.UpdateAllianceSkillS2C(System.Int32,AscensionProtocol.DTO.RoleAllianceSkillDTO)">
            <summary>
            升级宗门技能等级
            </summary>
            <param name="roleID"></param>
            <param name="skillDTO"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetAllianceSkillS2C(System.Int32)">
            <summary>
            获得宗门技能
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetDongFuStatusS2C(System.Int32,System.Int32)">
            <summary>
            獲得領洞府信息
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetAllianceSigninS2C(System.Int32,System.Int32)">
            <summary>
            获得签到数据
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetRoleAliianceConstructionMySql(System.Int32,System.Int32)">
            <summary>
            获取仙盟建筑信息
            </summary>
            <param name="ID"></param>
            <param name="roleID"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetAllianceSkillMySql(System.Int32)">
            <summary>
            获得角色宗门技能
            </summary>
            <param name="roleID"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetDongFuStatusMySql(System.Int32,System.Int32)">
            <summary>
            獲得洞府
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.RoleStatusSuccessS2C(System.Int32,AscensionProtocol.AllianceOpCode,System.Object)">
            <summary>
            处理角色宗门成功发送
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.RoleStatusFailS2C(System.Int32,AscensionProtocol.AllianceOpCode)">
            <summary>
            处理角色宗门失败发送
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.RefreshSignin(System.String)">
            <summary>
            刷新签到的方法
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.DeleteSignin(System.String)">
             <summary>
            回调删除签到表
             </summary>
             <param name="key"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetExchangeGoodsS2C(System.Int32,System.Int32)">
            <summary>
            获得宗门物品设置
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.SetExchangeGoodsS2C(System.Int32,AscensionProtocol.DTO.AllianceExchangeGoodsDTO)">
            <summary>
            设置宗门物品兑换
            </summary>
            <param name="roleID"></param>
            <param name="goodsDTO"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.ExchangeElixirS2C(System.Int32,System.Int32,AscensionProtocol.DTO.ExchangeDTO)">
            <summary>
            兑换丹药
            </summary>
            <param name="roleid"></param>
            <param name="id"></param>
            <param name="drugDTO"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.ExchangeScripturesPlatformS2C(System.Int32,System.Int32,AscensionProtocol.DTO.ExchangeDTO)">
            <summary>
            兑换功法
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetExchangeGoodsMySql(System.Int32,System.Int32)">
            <summary>
            获得宗门物品设置
            </summary>
            <param name="roleID"></param>
            <param name="goodsDTO"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.ExchangeElixirMySql(System.Int32,System.Int32,AscensionProtocol.DTO.ExchangeDTO)">
            <summary>
            兑换丹药
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.ApplyJoinAllianceS2C(System.Int32,System.Int32)">
            <summary>
            申请加入宗门
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.ConsentApplyS2C(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            一鍵同意入宗申請
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.RefuseApplyS2C(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            一鍵拒絕
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
            <param name="roleIDs"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetAllianceMemberS2C(System.Int32,System.Int32)">
            <summary>
            獲取宗門成員數據
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.SearchAllianceS2C(System.Int32,System.Int32,System.String)">
            <summary>
            模糊搜索宗门信息
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.CareerAdvancementS2C(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            修改宗门职位
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.QuitAllianceS2C(System.Int32,System.Int32)">
            <summary>
            退出宗门
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.KickOutAllianceS2C(System.Int32,System.Int32,System.Int32)">
            <summary>
            踢出宗门
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.ApplyJoinAllianceMySql(System.Int32,System.Int32)">
            <summary>
            申請加入宗門
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.ConsentApplyMySql(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            一鍵同意申請加入宗廟
            </summary>
            <param name="id"></param>
            <param name="roleIDs"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.RefuseApplyMySql(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            一鍵拒絕加入宗門
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetAllianceMemberMySql(System.Int32,System.Int32)">
            <summary>
            獲取宗門成員數據
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.QuitAllianceMySql(System.Int32,System.Int32)">
            <summary>
            退出宗门
            </summary>
            <param name="roleID"></param>
            <param name="id"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetAllAllianceS2C(System.Int32,AscensionProtocol.DTO.AlliancesDTO)">
            <summary>
            获得现有宗门,按照
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.CreatAllianceS2C(System.Int32,AscensionServer.Model.AllianceStatus)">
            <summary>
            创建宗门
            </summary>
            <param name="statusDTO"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetAllianceCallboardS2C(System.Int32,System.Int32)">
            <summary>
            获得宗门通告
            </summary>
            <param name="roleID"></param>
            <param name="ID"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.ChangeAllianceNameS2C(System.Int32,AscensionServer.Model.AllianceStatus)">
            <summary>
            修改宗門名稱
            </summary>
            <param name="roleID"></param>
            <param name="statusDTO"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.ChangeAlliancePurposeS2C(System.Int32,AscensionServer.Model.AllianceStatus)">
            <summary>
            修改宗門宗旨
            </summary>
            <param name="roleID"></param>
            <param name="statusDTO"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.GetRoleAliianceMySql(System.Int32)">
            <summary>
            获取角色自身宗门数据
            </summary>
            <param name="roleID"></param>
        </member>
        <member name="M:AscensionServer.GangsMananger.ChangeAllianceNameMySQL(System.Int32,AscensionServer.Model.AllianceStatus)">
            <summary>
            修改宗門名稱
            </summary>
        </member>
        <member name="M:AscensionServer.GangsMananger.ChangeAlliancePurposeMySql(System.Int32,AscensionServer.Model.AllianceStatus)">
            <summary>
            修改宗門宗旨
            </summary>
        </member>
        <member name="T:AscensionServer.InventoryManager">
            <summary>
            InventoryManager  InventoryManager.Client    就这两个有用拉   剩下的都可以删除拉
            </summary>
        </member>
        <member name="M:AscensionServer.InventoryManager.ConvertInt32(System.Int32)">
            <summary>
            转换为五位的全局id
            </summary>
            <param name="_ItemID"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.InventoryManager.EquipTypeMethod(System.Int32)">
            <summary>
            装备的类型
            </summary>
            <param name="_ItemID"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.InventoryManager.AddRingItemType(System.Int32)">
            <summary>
            添加的类型
            </summary>
            <param name="_itemId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.InventoryManager.InventotyDict">
            <summary>
            json 转换为字典中
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.InventoryManager.NHCriteria(System.Int32)">
            <summary>
            返回一个NHCriteria  映射对象
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.InventoryManager.AddNewItem(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            单个物品
            </summary>
            <param name="_id"></param>
            <param name="_itemId"></param>
            <param name="_RingItemCount"></param>
            <param name="_RingItemAdorn"></param>
        </member>
        <member name="M:AscensionServer.InventoryManager.UpdateNewItem(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            更新一个物品
            </summary>
            <param name="_id"></param>
            <param name="_itemId"></param>
            <param name="_RingItemCount"></param>
            <param name="_RingItemAdorn"></param>
        </member>
        <member name="M:AscensionServer.InventoryManager.Remove(System.Int32,System.Int32)">
            <summary>
            移除功能
            </summary>
            <param name="_ItemId"></param>
        </member>
        <member name="M:AscensionServer.InventoryManager.CriteriaSelectMethod``1(AscensionServer.NHCriteria)">
            <summary>
            映射T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nHCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.InventoryManager.ServerToClientParams(AscensionServer.Model.Ring)">
            <summary>
            返回给客端户的参数
            </summary>
            <param name="ringServerArray"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.InventoryManager.NumberCountMethod(System.Int32,System.Int32)">
            <summary>
            需要count
            </summary>
            <param name="_ItemHeld"></param>
            <param name="_ItemMax"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.InventoryManager.HeldMethod(System.Int32,System.Int32)">
            <summary>
            剩余的个数
            </summary>
            <param name="_ItemHeld"></param>
            <param name="_ItemMax"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.InventoryManager.VerifyIsExist(System.Int32,AscensionServer.NHCriteria)">
            <summary>
            验证是否存在
            </summary>
        </member>
        <member name="M:AscensionServer.InventoryManager.AddDataCmdS2C(System.Int32,AscensionProtocol.DTO.RingDTO,AscensionServer.NHCriteria)">
            <summary>
            添加
            </summary>
            <param name="roleId"></param>
            <param name="InventoryObj"></param>
            <param name="nHCriteria"></param>
        </member>
        <member name="M:AscensionServer.InventoryManager.UdpateCmdS2C(System.Int32,AscensionProtocol.DTO.RingDTO,AscensionServer.NHCriteria)">
            <summary>
            更新
            </summary>
            <param name="roleId"></param>
            <param name="InventoryObj"></param>
            <param name="nHCriteria"></param>
        </member>
        <member name="M:AscensionServer.InventoryManager.RemoveCmdS2C(System.Int32,AscensionProtocol.DTO.RingDTO,AscensionServer.NHCriteria)">
            <summary>
            移除
            </summary>
            <param name="roleId"></param>
            <param name="InventoryObj"></param>
            <param name="nHCriteria"></param>
        </member>
        <member name="M:AscensionServer.InventoryManager.SortingCmdS2C(System.Int32,AscensionProtocol.DTO.RingDTO,AscensionServer.NHCriteria)">
            <summary>
            排序
            </summary>
            <param name="roleId"></param>
            <param name="InventoryObj"></param>
            <param name="nHCriteria"></param>
        </member>
        <member name="M:AscensionServer.InventoryManager.GetDataCmdS2C(System.Int32,AscensionProtocol.DTO.RingDTO,AscensionServer.NHCriteria)">
            <summary>
            获得背包数据的Cmd
            </summary>
            <param name="roleId"></param>
            <param name="InventoryObj"></param>
            <param name="nHCriteria"></param>    //都是通过这个来 我看到了，你这个发出去就是属于CMD的，  只是进入服务器需要做一下修改，我看来下  对需要修改的不多，就是那个入口handler你处理下
        </member>
        <member name="E:AscensionServer.ILevelManager.OnRoleExitLevel">
            <summary>
            角色离开场景事件
            </summary>
        </member>
        <member name="M:AscensionServer.ILevelManager.LevelHasRole(AscensionServer.LevelTypeEnum,System.Int32,System.Int32)">
             <summary>
            场景是否包含有角色； 
             </summary>
        </member>
        <member name="M:AscensionServer.ILevelManager.SendMessageToLevelS2C(AscensionServer.LevelTypeEnum,System.Int32,Protocol.OperationData)">
             <summary>
            广播消息到指定场景，若场景不存在，则不执行； 
             </summary>
        </member>
        <member name="T:AscensionServer.LevelManager">
            <summary>
            场景管理器，管理野外高同步的数据；
            </summary>
        </member>
        <member name="F:AscensionServer.LevelManager.adventureLevelEntityDict">
            <summary>
            历练场景字典;
            </summary>
        </member>
        <member name="F:AscensionServer.LevelManager.secretAreaLevelEntityDict">
            <summary>
            秘境场景字典;
            </summary>
        </member>
        <member name="E:AscensionServer.LevelManager.OnRoleEnterLevel">
            <summary>
            角色进入场景事件
            </summary>
        </member>
        <member name="E:AscensionServer.LevelManager.OnRoleExitLevel">
            <summary>
            角色离开场景事件
            </summary>
        </member>
        <member name="M:AscensionServer.LevelManager.LevelHasRole(AscensionServer.LevelTypeEnum,System.Int32,System.Int32)">
             <summary>
            场景是否包含有角色； 
             </summary>
        </member>
        <member name="M:AscensionServer.LevelManager.SendMessageToLevelS2C(AscensionServer.LevelTypeEnum,System.Int32,Protocol.OperationData)">
             <summary>
            广播消息到指定场景，若场景不存在，则不执行； 
             </summary>
        </member>
        <member name="M:AscensionServer.ILobbyManager.TryRemove(System.Int32)">
            <summary>
            离开大厅；
            这个离开可能玩家进行了进入探索界面，或者副本
            </summary>
            <param name="sessionId">peerID</param>
            <returns>是否离开成功</returns>
        </member>
        <member name="M:AscensionServer.ILobbyManager.Contains(System.Int32)">
            <summary>
            是否在大厅中
            </summary>
            <param name="sessionId">id</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:AscensionServer.ILobbyManager.TryGetValue(System.Int32,AscensionServer.IPeerEntity@)">
            <summary>
            在大厅中通过ID查找Peer
            </summary>
            <param name="sessionId">id</param>
            <returns>查找到的对象</returns>
        </member>
        <member name="M:AscensionServer.LoginManager.GetAccountRolesId(AscensionServer.Model.User)">
            <summary>
            获取账号下的角色ID；
            </summary>
            <param name="user">需要查询的用户</param>
            <returns>账号对应的角色ID数组</returns>
        </member>
        <member name="M:AscensionServer.LoginManager.GetAccountRolesS2C(System.Int32,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
             <summary>
            客户端从服务器端获取当前账号下拥有角色的信息；
             </summary>
             <param name="packet">进入的请求数据</param>
        </member>
        <member name="P:AscensionServer.BattleCharacterEntity.RoomID">
            <summary>
            房间ID
            </summary>
        </member>
        <member name="P:AscensionServer.BattleCharacterEntity.UniqueID">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="P:AscensionServer.BattleCharacterEntity.GlobalID">
            <summary>
            公共ID
            </summary>
        </member>
        <member name="P:AscensionServer.BattleCharacterEntity.CharacterBattleData">
            <summary>
            属性数据
            </summary>
        </member>
        <member name="M:AscensionServer.BattleCharacterEntity.SetFriendAndEnemy(System.Collections.Generic.List{AscensionServer.BattleCharacterEntity},System.Collections.Generic.List{AscensionServer.BattleCharacterEntity})">
            <summary>
            设置该角色的敌方和友方
            </summary>
        </member>
        <member name="M:AscensionServer.BattleCharacterEntity.ToBattleDataBase``1">
            <summary>
            转换成发送用的人物初始化数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.BattleCharacterEntity.SetBattleAction(AscensionProtocol.DTO.BattleCmd,AscensionProtocol.DTO.BattleTransferDTO)">
            <summary>
            设置角色该回合战斗行为
            </summary>
        </member>
        <member name="M:AscensionServer.BattleCharacterManager.AddPlayerCharacter(System.Int32,System.Int32,AscensionServer.BattleFactionType)">
            <summary>
            添加玩家角色
            </summary>
        </member>
        <member name="M:AscensionServer.BattleCharacterManager.AddPetCharacter(System.Int32,System.Int32,AscensionServer.BattleFactionType)">
            <summary>
            添加宠物角色
            </summary>
        </member>
        <member name="M:AscensionServer.BattleCharacterManager.AddAICharacter(System.Int32,System.Int32,AscensionServer.BattleFactionType)">
            <summary>
            添加Ai角色
            </summary>
        </member>
        <member name="M:AscensionServer.BattleCharacterManager.DestoryCharacter(System.Int32)">
            <summary>
            移除角色
            </summary>
        </member>
        <member name="M:AscensionServer.IBattleCharacterManager.AddPlayerCharacter(System.Int32,System.Int32,AscensionServer.BattleFactionType)">
            <summary>
            添加玩家角色
            </summary>
        </member>
        <member name="M:AscensionServer.IBattleCharacterManager.AddPetCharacter(System.Int32,System.Int32,AscensionServer.BattleFactionType)">
            <summary>
            添加宠物角色
            </summary>
        </member>
        <member name="M:AscensionServer.IBattleCharacterManager.AddAICharacter(System.Int32,System.Int32,AscensionServer.BattleFactionType)">
            <summary>
            添加Ai角色
            </summary>
        </member>
        <member name="M:AscensionServer.IBattleCharacterManager.GetCharacterEntity(System.Int32)">
            <summary>
            获取角色实体对象
            </summary>
        </member>
        <member name="T:AscensionServer.BattleDamageData">
            <summary>
            战斗伤害数据
            </summary>
        </member>
        <member name="M:AscensionServer.BattleRoomEntity.InitRoom(System.Int32,AscensionProtocol.DTO.BattleInitDTO)">
            <summary>
            初始化房间
            </summary>
        </member>
        <member name="M:AscensionServer.BattleRoomEntity.CharacterPrepare(System.Int32)">
            <summary>
            指定角色准备完成
            </summary>
        </member>
        <member name="M:AscensionServer.BattleRoomEntity.StartGetBattleCmdWait">
            <summary>
            开始收集战斗指令倒计时等待
            </summary>
        </member>
        <member name="M:AscensionServer.BattleRoomEntity.SendInitDataS2C">
            <summary>
            发送战斗初始化信息给客户端
            </summary>
        </member>
        <member name="M:AscensionServer.BattleRoomEntity.SendMessageToAllPlayerS2C(Protocol.OperationData)">
            <summary>
            发送数据给战斗房间中所有玩家
            </summary>
        </member>
        <member name="M:AscensionServer.BattleRoomManager.CreateRoom(AscensionProtocol.DTO.BattleInitDTO)">
            <summary>
            创建房间
            </summary>
        </member>
        <member name="M:AscensionServer.BattleRoomManager.DestoryRoom">
            <summary>
            销毁房间
            </summary>
        </member>
        <member name="M:AscensionServer.BattleRoomManager.GetRoomId">
            <summary>
            获取可使用的roomId
            </summary>
            <returns>返回房间号</returns>
        </member>
        <member name="M:AscensionServer.BattleRoomManager.EnterBattleC2S(System.Int32,Protocol.OperationData)">
            <summary>
            进入战斗的请求
            </summary>
        </member>
        <member name="M:AscensionServer.BattleSkillBase.GetDamageData(System.Int32)">
            <summary>
            获取该技能的伤害
            </summary>
            <param name="index">第几段伤害</param>
        </member>
        <member name="T:AscensionServer.BattleSkillController">
            <summary>
            战斗角色技能控制器,每个角色实体持有，用来管理角色技能
            </summary>
        </member>
        <member name="T:AscensionServer.CharacterBattleData">
            <summary>
            用于进行战斗中角色的属性数据处理
            </summary>
        </member>
        <member name="T:AscensionServer.IPeerEntity">
            <summary>
            用于适配的Peer接口，管理一个具体实现的client peer 对象
            </summary>
        </member>
        <member name="P:AscensionServer.IPeerEntity.SessionId">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="P:AscensionServer.IPeerEntity.Available">
            <summary>
            是否存活；
            </summary>
        </member>
        <member name="P:AscensionServer.IPeerEntity.Handle">
            <summary>
            peer对象Handle
            </summary>
        </member>
        <member name="M:AscensionServer.IPeerEntity.SendEventMsg(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            发送消息到remotePeer
            </summary>
            <param name="opCode">操作码</param>
            <param name="userData">用户自定义的数据字典</param>
        </member>
        <member name="M:AscensionServer.IPeerEntity.SendMessage(Protocol.OperationData)">
            <summary>
            发送消息到remotePeer
            </summary>
            <param name="opData">消息数据</param>
        </member>
        <member name="T:AscensionServer.ServerDataConvertor">
            <summary>
            服务器数据转换
            </summary>
        </member>
        <member name="M:AscensionServer.ServerDataConvertor.TransObject``1(System.String)">
            <summary>
            转换为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IPeerManager.TryUpdate(System.Int32,AscensionServer.IPeerEntity,AscensionServer.IPeerEntity)">
            <summary>
            将指定键的现有值与指定值进行比较，如果相等，则用第三个值更新该键。
            </summary>
        </member>
        <member name="M:AscensionServer.IPeerManager.SendMessage(System.Int32,Protocol.OperationData)">
             <summary>
            发送消息到具体的SessionId 
             </summary>
        </member>
        <member name="M:AscensionServer.IPeerManager.SendMessage(System.Int32,System.Byte,System.Int16,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            同步方法；
            通过广播消息(MSG)；
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="opCode">操作码</param>
            <param name="subCode">子操作码</param>
            <param name="userData">用户自定义数据</param>
            <returns>是否能够发送</returns>
        </member>
        <member name="M:AscensionServer.IPeerManager.SendMessage(System.Int32,System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
             <summary>
             同步方法；
             通过广播消息(MSG)；
            若不存在session对象，则不发送，并返回false；
             </summary>
        </member>
        <member name="M:AscensionServer.IPeerManager.BroadcastMessageToAll(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            通过广播消息(MSG)；
            此方法会对所有在线且Available的peer对象进行消息广播；
            </summary>
            <param name="userData">用户自定义数据</param>
        </member>
        <member name="M:AscensionServer.IPeerManager.BroadcastMessageToAll(System.Byte,System.Int16,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            同步方法；
            通过广播消息(MSG)；
            </summary>
            <param name="opCode">操作码</param>
            <param name="subCode">子操作码</param>
            <param name="userData">用户自定义数据</param>
        </member>
        <member name="M:AscensionServer.IPeerManager.BroadcastMessageToAll(Protocol.OperationData)">
            <summary>
            同步方法；
            通过广播消息(MSG)；
            </summary>
            <param name="message">普通消息</param>
        </member>
        <member name="M:AscensionServer.IPeerManager.SendMessageAsync(System.Int32,Protocol.OperationData)">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="message">普通消息</param>
            <returns>线程Task</returns>
        </member>
        <member name="M:AscensionServer.IPeerManager.SendMessageAsync(System.Int32,System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
             <summary>
            异步广播消息到具体的sessionId 
             </summary>
        </member>
        <member name="M:AscensionServer.IPeerManager.SendMessageAsync(System.Int32,System.Byte,System.Int16,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="opCode">操作码</param>
            <param name="subCode">子操作码</param>
            <param name="userData">用户自定义数据</param>
            <returns>线程Task</returns>
        </member>
        <member name="M:AscensionServer.IPeerManager.BroadcastMessageToAllAsync(Protocol.OperationData,System.Action)">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="message">普通消息</param>
            <param name="callback">消息广播完成后的回调</param>
            <returns>线程Task</returns>
        </member>
        <member name="M:AscensionServer.IPeerManager.BroadcastMessageToAllAsync(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object},System.Action)">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="opCode">操作码</param>
            <param name="userData">用户自定义数据</param>
            <param name="callback">广播结束后的回调</param>
            <returns>线程Task</returns>
        </member>
        <member name="M:AscensionServer.IPeerManager.BroadcastMessageToAllAsync(System.Byte,System.Int16,System.Collections.Generic.Dictionary{System.Byte,System.Object},System.Action)">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="opCode">操作码</param>
            <param name="subCode">子操作码</param>
            <param name="userData">用户自定义数据</param>
            <param name="callback">广播结束后的回调</param>
            <returns>线程Task</returns>
        </member>
        <member name="T:AscensionServer.PeerManager">
            <summary>
            <see cref="T:AscensionServer.AscensionPeer"/>
            photon所有登录的peer都存储在此；
            SessionId在具体的Peer中，由服务器分配；
            其余各个模块都是从此通过SessionID取得Peer对象；
            </summary>
        </member>
        <member name="M:AscensionServer.PeerManager.TryUpdate(System.Int32,AscensionServer.IPeerEntity,AscensionServer.IPeerEntity)">
            <summary>
            将指定键的现有值与指定值进行比较，如果相等，则用第三个值更新该键。
            </summary>
        </member>
        <member name="M:AscensionServer.PeerManager.SendMessage(System.Int32,Protocol.OperationData)">
             <summary>
            发送消息到具体的SessionId 
             </summary>
        </member>
        <member name="M:AscensionServer.PeerManager.SendMessage(System.Int32,System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
             <summary>
             同步方法；
             通过广播消息(MSG)；
            若不存在session对象，则不发送，并返回false；
             </summary>
        </member>
        <member name="M:AscensionServer.PeerManager.SendMessage(System.Int32,System.Byte,System.Int16,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            同步方法；
            通过广播消息(MSG)；
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="opCode">操作码</param>
            <param name="subCode">子操作码</param>
            <param name="userData">用户自定义数据</param>
            <returns>是否能够发送</returns>
        </member>
        <member name="M:AscensionServer.PeerManager.BroadcastMessageToAll(Protocol.OperationData)">
            <summary>
            同步方法；
            通过广播消息(MSG)；
            </summary>
            <param name="message">普通消息</param>
        </member>
        <member name="M:AscensionServer.PeerManager.BroadcastMessageToAll(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            通过广播消息(MSG)；
            此方法会对所有在线且Available的peer对象进行消息广播；
            </summary>
            <param name="opCode">操作码</param>
            <param name="userData">用户自定义数据</param>
        </member>
        <member name="M:AscensionServer.PeerManager.BroadcastMessageToAll(System.Byte,System.Int16,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            同步方法；
            通过广播消息(MSG)；
            </summary>
            <param name="opCode">操作码</param>
            <param name="subCode">子操作码</param>
            <param name="userData">用户自定义数据</param>
        </member>
        <member name="M:AscensionServer.PeerManager.SendMessageAsync(System.Int32,Protocol.OperationData)">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="message">普通消息</param>
            <returns>线程Task</returns>
        </member>
        <member name="M:AscensionServer.PeerManager.SendMessageAsync(System.Int32,System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
             <summary>
            异步广播消息到具体的sessionId 
             </summary>
        </member>
        <member name="M:AscensionServer.PeerManager.SendMessageAsync(System.Int32,System.Byte,System.Int16,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="sessionId">会话Id</param>
            <param name="opCode">操作码</param>
            <param name="subCode">子操作码</param>
            <param name="userData">用户自定义数据</param>
            <returns>线程Task</returns>
        </member>
        <member name="M:AscensionServer.PeerManager.BroadcastMessageToAllAsync(Protocol.OperationData,System.Action)">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="message">普通消息</param>
            <param name="callback">消息广播完成后的回调</param>
            <returns>线程Task</returns>
        </member>
        <member name="M:AscensionServer.PeerManager.BroadcastMessageToAllAsync(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object},System.Action)">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="opCode">操作码</param>
            <param name="userData">用户自定义数据</param>
            <param name="callback">广播结束后的回调</param>
            <returns>线程Task</returns>
        </member>
        <member name="M:AscensionServer.PeerManager.BroadcastMessageToAllAsync(System.Byte,System.Int16,System.Collections.Generic.Dictionary{System.Byte,System.Object},System.Action)">
            <summary>
            异步广播消息(MSG)；
            </summary>
            <param name="opCode">操作码</param>
            <param name="subCode">子操作码</param>
            <param name="userData">用户自定义数据</param>
            <param name="callback">广播结束后的回调</param>
            <returns>线程Task</returns>
        </member>
        <member name="M:AscensionServer.BattleManager.EnqueueMessage(System.Int32,System.Object)">
            <summary>
            压入战斗数据；
            包含指令集等；
            </summary>
        </member>
        <member name="M:AscensionServer.LobbyManager.TryRemove(System.Int32)">
            <summary>
            离开大厅；
            这个离开可能玩家进行了进入探索界面，或者副本
            </summary>
            <param name="sessionId">peerID</param>
            <returns>是否离开成功</returns>
        </member>
        <member name="M:AscensionServer.LobbyManager.Contains(System.Int32)">
            <summary>
            是否在大厅中
            </summary>
            <param name="sessionId">id</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:AscensionServer.LobbyManager.TryGetValue(System.Int32,AscensionServer.IPeerEntity@)">
            <summary>
            在大厅中通过ID查找Peer
            </summary>
            <param name="sessionId">id</param>
            <returns>查找到的对象</returns>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.ResetPetAptitude(System.Int32,AscensionServer.Model.PetAptitude@)">
            <summary>
            重置宠物资质
            </summary>
            <param name="petID"></param>
            <param name="petAptitudeObj"></param>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.InitPet(System.Int32,System.String,AscensionServer.Model.RolePet)">
            <summary>
            新增新宠物
            </summary>
            <param name="petID"></param>
            <param name="petName"></param>
            <param name="rolePet"></param>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.RestPetSkill(System.Collections.Generic.List{System.Int32})">
            <summary>
            洗练宠物重置技能
            </summary>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.RandomSkillRemoveAdd(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            技能书使用顶替技能
            </summary>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.RolePetSetBattle(AscensionProtocol.DTO.RolePetDTO,AscensionServer.Model.RolePet,AscensionServer.NHCriteria,AscensionServer.Model.Pet)">
            <summary>
            宠物设置出战
            </summary>
            <param name="rolePetDTO"></param>
            <param name="rolePet"></param>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.GetRoleAllPet(AscensionServer.Model.RolePet,AscensionProtocol.DTO.RolePetDTO)">
            <summary>
            获得角色所有宠物
            </summary>
            <param name="rolePet"></param>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.RemoveRolePet(AscensionServer.Model.RolePet,AscensionProtocol.DTO.RolePetDTO,AscensionServer.Model.Pet)">
            <summary>
            移除角色宠物
            </summary>
            <param name="rolePet"></param>
            <param name="rolePetDTO"></param>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.GetPetAllCompeleteStatus(System.Int32,AscensionServer.NHCriteria,System.Int32,AscensionServer.NHCriteria)">
            <summary>
            获得宠物所有属性
            </summary>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.UpdataPetAbilityPoint(AscensionServer.Model.PetAbilityPoint,AscensionProtocol.DTO.PetCompleteDTO,AscensionServer.NHCriteria)">
            <summary>
            更新宠物加点方案
            </summary>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.PetCultivate(System.Int32,AscensionServer.NHCriteria,AscensionServer.Model.Pet,AscensionProtocol.DTO.PetCompleteDTO)">
            <summary>
            宠物培养丹药区分
            </summary>
            <param name="drugID"></param>
            <param name="nHCriteria"></param>
            <param name="pet"></param>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.VerifyDrugEffect(System.Int32,AscensionServer.Model.Pet,AscensionProtocol.DTO.PetCompleteDTO)">
            <summary>
            验证丹药作用
            </summary>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.PetExpDrug(AscensionServer.DrugData,System.Int32,AscensionServer.Model.Pet,AscensionProtocol.DTO.PetCompleteDTO)">
            <summary>
            增加经验
            </summary>
            <param name="drugData"></param>
            <param name="pet"></param>
        </member>
        <member name="M:AscensionServer.IPetStatusManager.PetAtitudeDrug(AscensionServer.DrugData,System.Int32,AscensionServer.Model.Pet,AscensionProtocol.DTO.PetCompleteDTO)">
            <summary>
            增加资质
            </summary>
        </member>
        <member name="M:AscensionServer.PetStatusManager.ResetPetStatus(AscensionServer.Model.Pet,AscensionServer.Model.PetAptitude,AscensionServer.Model.PetStatus@)">
            <summary>
            宠物洗练属性重置
            </summary>
            <param name="petDTO"></param>
            <param name="petAptitudeObj"></param>
            <param name="petAbilityPointDTO"></param>
            <param name="petStatusTemp"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.ResetPetAptitude(System.Int32,AscensionServer.Model.PetAptitude@)">
            <summary>
            重置宠物资质
            </summary>
            <param name="petID"></param>
            <param name="petAptitudeObj"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.InitPet(System.Int32,System.String,AscensionServer.Model.RolePet)">
            <summary>
            新增新宠物
            </summary>
            <param name="petID"></param>
            <param name="petName"></param>
            <param name="rolePet"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.RestPetSkill(System.Collections.Generic.List{System.Int32})">
            <summary>
            洗练宠物重置技能
            </summary>
        </member>
        <member name="M:AscensionServer.PetStatusManager.RandomSkillRemoveAdd(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            技能书使用顶替技能
            </summary>
        </member>
        <member name="F:AscensionServer.PetStatusManager.aa">
            <summary>
            正态分布随机数
            </summary>
        </member>
        <member name="M:AscensionServer.PetStatusManager.RolePetSetBattle(AscensionProtocol.DTO.RolePetDTO,AscensionServer.Model.RolePet,AscensionServer.NHCriteria,AscensionServer.Model.Pet)">
            <summary>
            宠物设置出战
            </summary>
            <param name="rolePetDTO"></param>
            <param name="rolePet"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.GetRoleAllPet(AscensionServer.Model.RolePet,AscensionProtocol.DTO.RolePetDTO)">
            <summary>
            获得角色所有宠物
            </summary>
            <param name="rolePet"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.RemoveRolePet(AscensionServer.Model.RolePet,AscensionProtocol.DTO.RolePetDTO,AscensionServer.Model.Pet)">
            <summary>
            移除角色宠物
            </summary>
            <param name="rolePet"></param>
            <param name="rolePetDTO"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.GetPetAllCompeleteStatus(System.Int32,AscensionServer.NHCriteria,System.Int32,AscensionServer.NHCriteria)">
            <summary>
            获得宠物所有属性
            </summary>
        </member>
        <member name="M:AscensionServer.PetStatusManager.UpdataPetAbilityPoint(AscensionServer.Model.PetAbilityPoint,AscensionProtocol.DTO.PetCompleteDTO,AscensionServer.NHCriteria)">
            <summary>
            更新宠物加点方案
            </summary>
        </member>
        <member name="M:AscensionServer.PetStatusManager.PetCultivate(System.Int32,AscensionServer.NHCriteria,AscensionServer.Model.Pet,AscensionProtocol.DTO.PetCompleteDTO)">
            <summary>
            宠物培养丹药区分
            </summary>
            <param name="drugID"></param>
            <param name="nHCriteria"></param>
            <param name="pet"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.VerifyDrugEffect(System.Int32,AscensionServer.Model.Pet,AscensionProtocol.DTO.PetCompleteDTO)">
            <summary>
            验证丹药作用
            </summary>
        </member>
        <member name="M:AscensionServer.PetStatusManager.PetExpDrug(AscensionServer.DrugData,System.Int32,AscensionServer.Model.Pet,AscensionProtocol.DTO.PetCompleteDTO)">
            <summary>
            增加经验
            </summary>
            <param name="drugData"></param>
            <param name="pet"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.PetAtitudeDrug(AscensionServer.DrugData,System.Int32,AscensionServer.Model.Pet,AscensionProtocol.DTO.PetCompleteDTO)">
            <summary>
            增加资质
            </summary>
        </member>
        <member name="M:AscensionServer.PetStatusManager.VerifyPetAbilitypoint(AscensionServer.Model.Pet,System.Int32@)">
            <summary>
            验证宠物当前加点数
            </summary>
            <param name="pet"></param>
            <param name="points"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.VerifyPetAllStatus(AscensionProtocol.DTO.PetAbilityPointDTO,AscensionServer.Model.PetAptitude,AscensionServer.Model.PetStatus,AscensionProtocol.DTO.PetCompleteDTO,AscensionServer.Model.Pet)">
            <summary>
            验证宠物完整属性
            </summary>
        </member>
        <member name="M:AscensionServer.PetStatusManager.VerifyPetAbilityAddition(AscensionProtocol.DTO.PetAbilityPointDTO,AscensionProtocol.DTO.PetStatusDTO,AscensionServer.PetLevelData)">
            <summary>
            验证加点后的加成
            </summary>
            <param name="petAbilityPoint"></param>
            <param name="petStatusDTO"></param>
            <param name="petLevelData"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.PetStatusManager.VerifyPetPassivitySkill(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{AscensionProtocol.DTO.PetStatusDTO}@)">
            <summary>
             获得所有被动技能的加成
            </summary>
            <param name="skillid"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.StatusAddition(AscensionServer.Model.PetStatus,System.Collections.Generic.List{AscensionProtocol.DTO.PetStatusDTO},AscensionProtocol.DTO.PetStatusDTO@)">
            <summary>
            加成计算资质后计算加点后的总加成
            </summary>
            <param name="petStatus"></param>
            <param name="petAbilityStatus"></param>
            <param name="petStatusTemp"></param>
        </member>
        <member name="M:AscensionServer.PetStatusManager.AssignSameFieldValue(AscensionServer.Model.PetAptitude,AscensionProtocol.DTO.PetAptitudeDTO)">
            <summary>
            资质DO转换DTO
            </summary>
            <param name="petAptitude"></param>
            <param name="petAptitudeDTO"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.PracticeManager.TriggerBottleneckS2C(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            触发瓶颈发送
            </summary>
            <param name="roleID"></param>
            <param name="level"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.TriggerBottleneck(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="roleID"></param>
            <param name="level"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.GetRootPercent(AscensionServer.BottleneckData,System.Int32,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            获取零灵根概率
            </summary>
            <param name="bottleneckData"></param>
            <param name="rootnum"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.PracticeManager.GetDemonPercent(AscensionServer.DemonData,System.Int32)">
            <summary>
            获取心魔对应数组的下标
            </summary>
            <param name="demonData"></param>
            <param name="CraryVaule"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.PracticeManager.ResultFailS2C(System.Int32,AscensionProtocol.PracticeOpcode)">
            <summary>
            失败返回
            </summary>
        </member>
        <member name="M:AscensionServer.PracticeManager.ResultSuccseS2C(System.Int32,AscensionProtocol.PracticeOpcode,System.Object)">
            <summary>
            结果成功返回
            </summary>
            <param name="roleID"></param>
            <param name="opcode"></param>
            <param name="data"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.ResultSuccseS2C(System.Int32,AscensionProtocol.PracticeOpcode,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            结果成功返回多参数
            </summary>
            <param name="roleID"></param>
            <param name="opcode"></param>
            <param name="dict"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.GetRoleGongFaS2C(System.Int32)">
            <summary>
            获得角色所有功法
            </summary>
            <param name="RoleID"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.GetRoleMiShuS2C(System.Int32)">
            <summary>
            获得角色秘术模块
            </summary>
            <param name="RoleID"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.GetRoleGongFaMySql(System.Int32)">
            <summary>
            获取数据库数据
            </summary>
            <param name="RoleID"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.GetRoleMiShuMySql(System.Int32)">
            <summary>
            获取数据库数据
            </summary>
            <param name="RoleID"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.SwitchPracticeTypeS2C(AscensionProtocol.DTO.OnOffLineDTO)">
            <summary>
            切换修炼秘书功法
            </summary>
            <param name="onOffLineDTO"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.GetOffLineExpS2C(System.Int32)">
             <summary>
            计算离线经验发送给客户端
             </summary>
        </member>
        <member name="M:AscensionServer.PracticeManager.UploadingExpS2C(AscensionProtocol.DTO.OnOffLineDTO)">
            <summary>
            自动加经验
            </summary>
        </member>
        <member name="M:AscensionServer.PracticeManager.GetOffLineExpMySql(System.Int32)">
            <summary>
            计算离线经验
            </summary>
            <param name="roleID"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.UpLoadingExpMySql(AscensionProtocol.DTO.OnOffLineDTO)">
            <summary>
            挂機經驗的結算
            </summary>
            <param name="onOffLine"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.AddGongFaExp(System.Int32,AscensionServer.Model.CultivationMethod,System.Int32,AscensionProtocol.DTO.CultivationMethodDTO@)">
            <summary>
            添加功法经验方法
            </summary>
        </member>
        <member name="M:AscensionServer.PracticeManager.AddMiShu(AscensionServer.Model.MiShu,System.Int32,AscensionServer.Model.MiShu@)">
            <summary>
            添加秘术
            </summary>
            <param name="miShu"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.PracticeManager.UpdateOnOffLine(AscensionProtocol.DTO.OnOffLineDTO)">
            <summary>
            更新数据至数据库
            </summary>
            <param name="onOffLineDTO"></param>
        </member>
        <member name="M:AscensionServer.PracticeManager.ChangeDataType(AscensionProtocol.DTO.CultivationMethodDTO)">
            <summary>
            更新离线经验相关的数据
            </summary>
        </member>
        <member name="M:AscensionServer.ITacticalManager.TacticalCreateAdd(AscensionProtocol.DTO.TacticalDTO)">
            <summary>
            创建新的阵法实体，并添加到临时集合
            </summary>
            <param name="roleid"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ITacticalManager.TryAddRemoveTactical(System.Int32,AscensionProtocol.DTO.TacticalDTO@)">
            <summary>
            移除暂存集合放入总集合
            </summary>
            <param name="roleid"></param>
            <param name="tacticalDTO"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ITacticalManager.TryRemoveTactical(System.Int32)">
            <summary>
            打断操作移除临时集合储存阵法
            </summary>
            <param name="roleid"></param>
        </member>
        <member name="M:AscensionServer.ITacticalManager.GetExpendTacticalID">
            <summary>
            获取自增ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ITacticalManager.TryGetValue(System.Int32,System.Collections.Concurrent.ConcurrentDictionary{System.Int32,AscensionProtocol.DTO.TacticalDTO}@)">
            <summary>
            获取当前地图块的所有阵法
            </summary>
            <param name="roleId"></param>
            <param name="tactical"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ITacticalManager.GetRoleTactic(System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.TacticalDTO}@)">
            <summary>
            获取本地的暂存角色阵法
            </summary>
            <param name="roleid"></param>
            <param name="roletactical"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ITacticalManager.SendAllLevelRoleTactical(AscensionProtocol.DTO.TacticalDTO,AscensionProtocol.ReturnCode)">
            <summary>
            广播给当前场景所有人对阵法的操作
            </summary>
            <param name="tacticalDTO"></param>
            <param name="returnCode">成功为生成，失败为销毁</param>
        </member>
        <member name="M:AscensionServer.ITacticalManager.RedisDeleteCaback(System.String)">
            <summary>
            监听Redis删除后的回调
            </summary>
        </member>
        <member name="M:AscensionServer.ITacticalManager.TryAddRoleAllTactical(System.Int32,AscensionProtocol.DTO.TacticalDTO)">
            <summary>
            储存每个角色的所有阵法
            </summary>
            <param name="roleid"></param>
            <param name="tacticalDTO"></param>
        </member>
        <member name="M:AscensionServer.MapResourceManager.TakeUpResourceC2S(System.Int32,Protocol.OperationData)">
            <summary>
            占用资源 客户端->服务器
            </summary>
        </member>
        <member name="M:AscensionServer.MapResourceManager.OnRoleEnterMap(AscensionServer.RoleEntity)">
            <summary>
            发送已生成资源至指定场景
            </summary>
        </member>
        <member name="P:AscensionServer.TacticalManager.TacticalEntityDict">
            <summary>
            记录确认创建的阵法实体
            </summary>
        </member>
        <member name="P:AscensionServer.TacticalManager.roletacticaltemp">
            <summary>
            记录临时储存的阵法，用于打断后撤销,key为roleid
            </summary>
        </member>
        <member name="P:AscensionServer.TacticalManager.RecordDelTactical">
            <summary>
            通过Redis返回的值取总集合中value移除，list下标0为地图id,1为阵法自增ID
            </summary>
        </member>
        <member name="M:AscensionServer.TacticalManager.TacticalCreateAdd(AscensionProtocol.DTO.TacticalDTO)">
            <summary>
            创建新的阵法实体，并添加到临时集合
            </summary>
        </member>
        <member name="M:AscensionServer.TacticalManager.TryAddRemoveTactical(System.Int32,AscensionProtocol.DTO.TacticalDTO@)">
            <summary>
            移除暂存集合放入总集合
            </summary>
        </member>
        <member name="M:AscensionServer.TacticalManager.TryRemoveTactical(System.Int32)">
            <summary>
            打断操作移除临时集合储存阵法
            </summary>
        </member>
        <member name="M:AscensionServer.TacticalManager.GetExpendTacticalID">
            <summary>
            获取自增ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.TacticalManager.TryGetValue(System.Int32,System.Collections.Concurrent.ConcurrentDictionary{System.Int32,AscensionProtocol.DTO.TacticalDTO}@)">
            <summary>
            获取当前地图块的所有阵法
            </summary>
            <param name="roleId"></param>
            <param name="tactical"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.TacticalManager.GetRoleTactic(System.Int32,System.Collections.Generic.List{AscensionProtocol.DTO.TacticalDTO}@)">
            <summary>
            获取本地的暂存角色阵法
            </summary>
            <param name="roleid"></param>
            <param name="roletactical"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.TacticalManager.SendAllLevelRoleTactical(AscensionProtocol.DTO.TacticalDTO,AscensionProtocol.ReturnCode)">
            <summary>
            广播给当前场景所有人对阵法的操作
            </summary>
            <param name="tacticalDTO"></param>
            <param name="returnCode">成功为生成，失败为销毁</param>
        </member>
        <member name="M:AscensionServer.TacticalManager.RedisDeleteCaback(System.String)">
            <summary>
            监听Redis删除后的回调
            </summary>
        </member>
        <member name="M:AscensionServer.TacticalManager.TryAddRoleAllTactical(System.Int32,AscensionProtocol.DTO.TacticalDTO)">
            <summary>
            储存每个角色的所有阵法
            </summary>
            <param name="roleid"></param>
            <param name="tacticalDTO"></param>
        </member>
        <member name="M:AscensionServer.TacticalManager.OnSendTactical(AscensionServer.RoleEntity)">
            <summary>
            发送已生成的阵法至指定场景
            </summary>
        </member>
        <member name="P:AscensionServer.TacticalEntity.PlayerId">
            <summary>
            触碰或进入玩家ID
            </summary>
        </member>
        <member name="M:AscensionServer.RoleAssetsManager.RoleStatusSuccessS2C(System.Int32,AscensionProtocol.RoleAssetsOpCode,System.Object)">
            <summary>
            处理角色资产成功发送
            </summary>
        </member>
        <member name="M:AscensionServer.RoleAssetsManager.RoleStatusFailS2C(System.Int32,AscensionProtocol.RoleAssetsOpCode)">
            <summary>
            处理角色资产失败发送
            </summary>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.GetRolePointAbilityS2C(AscensionProtocol.DTO.RoleStatusPointDTO)">
            <summary>
            获取人物加点方案
            </summary>
            <param name="pointDTO"></param>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.SetRolePointS2C(AscensionProtocol.DTO.RoleStatusPointDTO)">
             <summary>
            设置人物加点
             </summary>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.SetRoleSlnNameS2C(AscensionProtocol.DTO.RoleStatusPointDTO)">
            <summary>
            设置加点方案名称
            </summary>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.RestartPointS2C(AscensionProtocol.DTO.RoleStatusPointDTO)">
            <summary>
            重置加点
            </summary>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.GetRoleStatusMySql(AscensionProtocol.DTO.RoleStatusPointDTO)">
            <summary>
            获取MySql中的角色数据
            </summary>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.RolePointCalculate(AscensionProtocol.DTO.RoleStatusPointDTO,AscensionProtocol.DTO.RoleStatusPointDTO)">
            <summary>
            人物加点计算验证
            </summary>
            <param name="pointObj">数据库</param>
            <param name="pointDTO">客户端接收数据</param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.ChangeRoleStatusPointType(AscensionProtocol.DTO.RoleStatusPointDTO)">
            <summary>
            数据类型转换
            </summary>
            <param name="pointDTO"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.ChangeRoleStatusPointType(AscensionServer.Model.RoleStatusPoint)">
            <summary>
            数据类型转换
            </summary>
            <param name="pointDTO"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.GetRoleStatus(System.Int32,AscensionServer.RoleStatusDatas)">
             <summary>
            获取数据库功法秘术数值
             </summary>
             <param name="gongfaList"></param>
             <param name="mishuList"></param>
             <param name="roleStatusDatas"></param>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.SumRolestatus(System.Int32,AscensionProtocol.DTO.RoleStatusPointDTO,AscensionProtocol.DTO.RoleStatusDTO)">
            <summary>
            飞行法器数值加上人物加点数值
            </summary>
            <param name="flyID"></param>
            <param name="roleStatusPoint"></param>
            <param name="roleStatusDTO"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.RoleStatusSuccessS2C(System.Int32,AscensionProtocol.RoleStatusOpCode,System.Object)">
            <summary>
            处理角色属性成功发送
            </summary>
        </member>
        <member name="M:AscensionServer.RoleStatusManager.RoleStatusFailS2C(System.Int32,AscensionProtocol.RoleStatusOpCode)">
            <summary>
            处理角色属性失败发送
            </summary>
        </member>
        <member name="M:AscensionServer.IRoleManager.SendMessage(System.Int32,Protocol.OperationData)">
             <summary>
            通过roleId发送信息到登录的角色;
             </summary>
        </member>
        <member name="M:AscensionServer.IRoleManager.BroadcastMessageToAll(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            广播消息到所有登录的角色
            </summary>
        </member>
        <member name="T:AscensionServer.RoleEntity">
             <summary>
            
             </summary>
        </member>
        <member name="M:AscensionServer.RoleManager.SendMessage(System.Int32,Protocol.OperationData)">
             <summary>
            通过roleId发送信息到登录的角色;
             </summary>
        </member>
        <member name="M:AscensionServer.RoleManager.BroadcastMessageToAll(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
            广播消息到所有登录的角色
            </summary>
        </member>
        <member name="P:AscensionServer.RoomEntity.Available">
            <summary>
            当前房间对象是否可用
            </summary>
        </member>
        <member name="E:AscensionServer.RoomEntity.BroadcastBattleEvent">
            <summary>
            广播消息事件委托；
            </summary>
        </member>
        <member name="F:AscensionServer.RoomEntity.countDownSec">
            <summary>
            倒计时秒
            </summary>
        </member>
        <member name="F:AscensionServer.RoomEntity.canCacheCmd">
            <summary>
            是否可收集指令
            </summary>
        </member>
        <member name="F:AscensionServer.RoomEntity.roundCount">
            <summary>
            当前房间内战斗的回合数
            </summary>
        </member>
        <member name="M:AscensionServer.RoomEntity.OnInit(System.Int32)">
            <summary>
            初始化房间；
            分配ID给当前房间
            </summary>
            <param name="roomId">分配的房间ID</param>
        </member>
        <member name="M:AscensionServer.RoomEntity.Create(AscensionServer.RoleEntity[])">
            <summary>
            通过peer实体生成房间实体；
            </summary>
            <param name="roles">peer的数组</param>
            <returns>生成的房间实体</returns>
        </member>
        <member name="M:AscensionServer.RoomEntity.Create(System.Int32[])">
            <summary>
            通过sessionId生成roomEntity;
            若传入的任意sessionId无效，则房间实体生成失败，返回空；
            </summary>
            <param name="roleIds">用户会话Id数组</param>
            <returns>生成的房间实体</returns>
        </member>
        <member name="M:AscensionServer.RoomEntity.StartRound">
            <summary>
            开始回合；
            收集指令；
            </summary>
        </member>
        <member name="M:AscensionServer.RoomManager.OnRefresh">
            <summary>
            周期轮询释放无用的房间对象；
            </summary>
        </member>
        <member name="T:AscensionServer.LevelEntity">
            <summary>
            场景实体对象
            </summary>
        </member>
        <member name="M:AscensionServer.LevelEntity.OnCommandC2S(Protocol.IDataContract)">
             <summary>
            接收到消息后直接存储，不考虑顺序 
             </summary>
        </member>
        <member name="M:AscensionServer.LevelEntity.SndMsg2AllS2C(Protocol.OperationData)">
            <summary>
            发送消息到当前场景所有玩家；
            Send message to all role server to client
            </summary>
        </member>
        <member name="M:AscensionServer.LevelEntity.OnEnterLevelS2C(AscensionServer.RoleEntity)">
            <summary>
            将已在场景中的玩家数据发送给进来的角色；
            </summary>
        </member>
        <member name="M:AscensionServer.LevelEntity.OnExitLevelS2C(System.Int32)">
            <summary>
            将离开的玩家数据广播给已经在level中的其他玩家；
            </summary>
        </member>
        <member name="T:AscensionServer.IDataVerifyHelper">
            <summary>
            数值验证帮助接口；
            例：玩家释放技能，服务器验证当前蓝足够时，才允许释放；
            客户端先验证是否可释放，验证通过后由服务器进行再次验证；
            </summary>
        </member>
        <member name="M:AscensionServer.IDataVerifyHelper.VerifyData(Protocol.IDataContract)">
             <summary>
            验证数据是否正确； 
             </summary>
        </member>
        <member name="M:AscensionServer.ISecondaryJobManager.GetRoleAlchemy(AscensionProtocol.DTO.SecondaryJobDTO,AscensionServer.NHCriteria)">
            <summary>
            获得所有已学配方
            </summary>
            <param name="secondaryJobDTO"></param>
            <param name="nHCriteriarole"></param>
        </member>
        <member name="M:AscensionServer.ISecondaryJobManager.UpdateRoleAlchemy(AscensionProtocol.DTO.SecondaryJobDTO,AscensionServer.NHCriteria)">
            <summary>
            学习新配方
            </summary>
            <param name="secondaryJobDTO"></param>
            <param name="nHCriteriarole"></param>
        </member>
        <member name="M:AscensionServer.SecondaryJobManager.GetRoleAlchemy(AscensionProtocol.DTO.SecondaryJobDTO,AscensionServer.NHCriteria)">
            <summary>
            获得所有已学配方
            </summary>
            <param name="secondaryJobDTO"></param>
            <param name="nHCriteriarole"></param>
        </member>
        <member name="M:AscensionServer.SecondaryJobManager.UpdateRoleAlchemy(AscensionProtocol.DTO.SecondaryJobDTO,AscensionServer.NHCriteria)">
            <summary>
            学习新配方
            </summary>
            <param name="secondaryJobDTO"></param>
            <param name="nHCriteriarole"></param>
        </member>
        <member name="T:AscensionServer.SkillEntity">
            <summary>
            技能实体对象；
            技能的CD、持续时间等使用此作为容器进行运算；
            此实体持有技能数据，
            </summary>
        </member>
        <member name="M:AscensionServer.SkillEntity.OnRefresh">
            <summary>
            空虚函数;
            </summary>
        </member>
        <member name="T:AscensionServer.SkillManager">
            <summary>
            技能模块；
            注：此模块用于验证客户端角色释放技能时数值的验证、转发等；
            </summary>
        </member>
        <member name="M:AscensionServer.SkillManager.OnPlayerSkillC2S(System.Int32,Protocol.OperationData)">
            <summary>
            接收来自客户端的技能输入
            </summary>
        </member>
        <member name="T:AscensionServer.SkillVariable">
            <summary>
            canCast是否可释放技能：
            检测规则：是否足够mana、hp等值，是否处于cd中；
            </summary>
        </member>
        <member name="P:AscensionServer.SkillVariable.CanCast">
            <summary>
            是否可释放；
            </summary>
        </member>
        <member name="P:AscensionServer.SkillVariable.OnCoolTime">
            <summary>
            是否处于CD状态
            </summary>
        </member>
        <member name="P:AscensionServer.SkillVariable.SkillId">
            <summary>
            技能Id；
            </summary>
        </member>
        <member name="P:AscensionServer.IServerTeamManager.PlayerIdToTeamIdDict">
            <summary>
            玩家id 和队伍id 之间的映射
            </summary>
        </member>
        <member name="P:AscensionServer.IServerTeamManager.TeamTOModel">
            <summary>
            队伍id 和队伍信息模型映射
            </summary>
        </member>
        <member name="P:AscensionServer.IServerTeamManager.OldTeamList">
            <summary>
            收集，释放解散的存在的队伍信息
            </summary>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.IsLeader(System.Int32)">
            <summary>
            判断是否是队长
            </summary>
            <param name="playerId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.ServerToClientParams">
            <summary>
            服务器返回给客户端的参数
            </summary>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.ServerToClientCreate(System.Int32)">
            <summary>
            创建房间
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.ServerToClientApply(System.Int32)">
            <summary>
            申请加入队伍
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.ServerToClientJoin(System.Collections.Generic.List{AscensionProtocol.DTO.RoleDTO})">
            <summary>
            同意加入队伍
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.ServerToClientRefused(System.Int32)">
            <summary>
            拒绝加入队伍
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.ServerToClientTransfer(System.Collections.Generic.List{AscensionProtocol.DTO.RoleDTO})">
             <summary>
            转让队长
             </summary>
             <param name="roleDTOs"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.ServerToClientDissolveTeam(System.Collections.Generic.List{AscensionProtocol.DTO.RoleDTO})">
            <summary>
            退出队伍 
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.CreateTeam(AscensionProtocol.DTO.RoleDTO,System.Int32[])">
            <summary>
            创建一个队伍  
            </summary>
            <param name="roleDTO"></param>
            <param name="levelLimint"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.ApplyJoinTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            加入队伍申请
            </summary>
            <param name="roleDTO"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.JoinTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            同意加入队伍  
            </summary>
            <param name="roleDTO"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.RefusedApplyTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            拒绝队伍申请
            </summary>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.TransferTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            转让队长
            </summary>
            <param name="roleDTO"></param>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.LevelTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            离开队伍   踢人
            </summary>
            <param name="roleDTO"></param>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.ExitTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            退出队伍
            </summary>
            <param name="roleDTO"></param>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.IServerTeamManager.PositionTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            调整站位
            </summary>
        </member>
        <member name="M:AscensionServer.ITeamManager.JoinMatchQueue(System.Int32)">
             <summary>
            加入随机匹配队列
             </summary>
        </member>
        <member name="M:AscensionServer.ITeamManager.MatchTeam">
            <summary>
            服务端会一直运行；
            异步随机匹配组队
            </summary>
            <returns>异步运行</returns>
        </member>
        <member name="M:AscensionServer.ITeamManager.JoinTeam(System.Int32,System.Int32)">
            <summary>
            加入指定的小队
            </summary>
            <param name="teamID">小队ID</param>
            <param name="roleId">peerID</param>
            <returns>是否加入成功</returns>
        </member>
        <member name="T:AscensionServer.ServerTeamManager">
            <summary>
            待完善
            未统一的服务器端组队功能；
            </summary>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.CreateTeam(AscensionProtocol.DTO.RoleDTO,System.Int32[])">
            <summary>
            创建一个队伍  
            </summary>
            <param name="roleDTO"></param>
            <param name="levelLimint"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ApplyJoinTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            加入队伍申请
            </summary>
            <param name="roleDTO"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.JoinTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            同意加入队伍  
            </summary>
            <param name="roleDTO"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.RefusedApplyTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            拒绝队伍申请
            </summary>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.TransferTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            转让队长
            </summary>
            <param name="roleDTO"></param>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.LevelTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            离开队伍   踢人
            </summary>
            <param name="roleDTO"></param>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ExitTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            退出队伍
            </summary>
            <param name="roleDTO"></param>
            <param name="teamId"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.PositionTeam(AscensionProtocol.DTO.RoleDTO,System.Int32)">
            <summary>
            调整站位
            </summary>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ServerToClientInit(System.Int32)">
            <summary>
            服务器主动给客户端发消息 初始化队伍信息
            </summary>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ServerToClientCreate(System.Int32)">
            <summary>
            创建房间
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ServerToClientApply(System.Int32)">
            <summary>
            申请加入队伍
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ServerToClientJoin(System.Collections.Generic.List{AscensionProtocol.DTO.RoleDTO})">
            <summary>
            同意加入队伍
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ServerToClientRefused(System.Int32)">
            <summary>
            拒绝加入队伍
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ServerToClientTransfer(System.Collections.Generic.List{AscensionProtocol.DTO.RoleDTO})">
             <summary>
            转让队长
             </summary>
             <param name="roleDTOs"></param>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ServerToClientDissolveTeam(System.Collections.Generic.List{AscensionProtocol.DTO.RoleDTO})">
            <summary>
            退出队伍 
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="P:AscensionServer.ServerTeamManager.PlayerIdToTeamIdDict">
            <summary>
            玩家id 和队伍id 之间的映射
            </summary>
        </member>
        <member name="P:AscensionServer.ServerTeamManager.TeamTOModel">
            <summary>
            队伍id 和队伍信息模型映射
            </summary>
        </member>
        <member name="P:AscensionServer.ServerTeamManager.OldTeamList">
            <summary>
            收集，释放解散的存在的队伍信息
            </summary>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.IsLeader(System.Int32)">
            <summary>
            判断是否是队长
            </summary>
            <param name="playerId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ServerTeamManager.ServerToClientParams">
            <summary>
            服务器返回给客户端的参数
            </summary>
        </member>
        <member name="P:AscensionServer.TeamEntity.CaptainId">
            <summary>
            队长ID
            </summary>
        </member>
        <member name="P:AscensionServer.TeamEntity.TeamID">
            <summary>
            系统分配的队伍ID
            </summary>
        </member>
        <member name="P:AscensionServer.TeamEntity.IsFull">
            <summary>
            是否队伍满员
            </summary>
        </member>
        <member name="E:AscensionServer.TeamEntity.EventMessage">
            <summary>
            广播事件消息 ;
            </summary>
        </member>
        <member name="E:AscensionServer.TeamEntity.Message">
            <summary>
            广播普通消息;
            </summary>
        </member>
        <member name="M:AscensionServer.TeamEntity.Oninit(System.Int32,System.Int32)">
            <summary>
            初始化队伍
            </summary>
            <param name="createrId">创建者的ID</param>
        </member>
        <member name="M:AscensionServer.TeamEntity.JoinTeam(System.Int32)">
            <summary>
            加入队伍
            </summary>
            <param name="roleId">peerID</param>
            <returns>是否加入成功</returns>
        </member>
        <member name="M:AscensionServer.TeamEntity.LeaveTeam(System.Int32)">
            <summary>
            主动离队
            </summary>
            <param name="roleId"></param>
            <returns>是否离队成功</returns>
        </member>
        <member name="M:AscensionServer.TeamEntity.KickOutOfTeam(System.Int32,System.Int32)">
            <summary>
            被请离队伍；
            值一队长有权限
            </summary>
        </member>
        <member name="M:AscensionServer.TeamEntity.DissolveTeam">
            <summary>
            解散队伍
            </summary>
        </member>
        <member name="M:AscensionServer.TeamEntity.PreferredToCaptain(System.UInt32,System.Int32)">
            <summary>
            提升为队长；
            只有前队长才进行的命令;
            </summary>
        </member>
        <member name="M:AscensionServer.TeamEntity.BroadcastEvent(System.Byte,System.Object)">
            <summary>
            广播消息
            </summary>
        </member>
        <member name="F:AscensionServer.TeamManager._IDLenth">
            <summary>
            房间ID长度
            </summary>
        </member>
        <member name="F:AscensionServer.TeamManager._MinValue">
            <summary>
            生成房间时最小取值范围
            </summary>
        </member>
        <member name="F:AscensionServer.TeamManager._MaxValue">
            <summary>
            成功房间时最大取值范围
            </summary>
        </member>
        <member name="M:AscensionServer.TeamManager.JoinMatchQueue(System.Int32)">
             <summary>
            加入随机匹配队列
             </summary>
        </member>
        <member name="M:AscensionServer.TeamManager.MatchTeam">
            <summary>
            服务端会一直运行；
            异步随机匹配组队
            </summary>
            <returns>异步运行</returns>
        </member>
        <member name="M:AscensionServer.TeamManager.JoinTeam(System.Int32,System.Int32)">
            <summary>
            加入指定的小队
            </summary>
            <param name="teamID">小队ID</param>
            <param name="roleId">peerID</param>
            <returns>是否加入成功</returns>
        </member>
        <member name="M:AscensionServer.TeamManager.CreateTeamID">
            <summary>
            生成队伍ID；
            尾递归检测是否生成了同样的key
            </summary>
            <returns>生成后的ID</returns>
        </member>
        <member name="T:AscensionServer.ConcurrentInt">
            <summary>
            线程安全的int 类型
            </summary>
        </member>
        <member name="M:AscensionServer.ConcurrentInt.AddGetRoomId">
            <summary>
            添加并获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ConcurrentInt.ReduceGetRoomId">
            <summary>
            减少并获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.ConcurrentInt.GetRoomId">
            <summary>
            获取
            </summary>
            <returns></returns>
        </member>
        <member name="P:AscensionServer.Model.RoleStatus.RoleID">
            <summary>
            角色id
            角色属性点
            角色血量
            角色最大血量
            角色真元
            角色最大真元
            角色神魂
            角色最大神魂
            角色精血
            攻击速度
            物理攻击
            物理防御
            法术攻击
            法术防御
            物理暴击几率
            法术暴击几率
            暴免率
            物理暴击伤害
            法术暴击伤害
            防暴伤害
            移动速度
            业果值
            最大业果值(最大值为固定值及表中初始数值)
            隐匿值
            </summary>
        </member>
        <member name="M:AscensionServer.AddBottleneckSubHandler.GetRootPercent(AscensionServer.BottleneckData,System.Int32,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            获取零灵根概率
            </summary>
            <param name="bottleneckData"></param>
            <param name="rootnum"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.AddBottleneckSubHandler.GetDemonPercent(AscensionServer.DemonData,System.Int32)">
            <summary>
            获取心魔对应数组的下标
            </summary>
            <param name="demonData"></param>
            <param name="CraryVaule"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Log4NetDebugHelper.LogFatal(System.Object,System.Object)">
            <summary>
            谨慎使用；
            最高级别的报错；
            仅在会导致程序奔溃的位置进行调用；
            </summary>
        </member>
        <member name="M:AscensionServer.GetRoleAllianceSubHandler.GetPopularity(AscensionServer.Model.AllianceStatus,System.Int32,System.Int32)">
            <summary>
            判断人气不够解散的逻辑
            </summary>
        </member>
        <member name="T:AscensionServer.OccupiedResourceUnitHandler">
            <summary>
            占用资源单位请求；
            例如怪物被占用，则其他玩家无法触发战斗；
            矿石被占用，则其他玩家无法拾取
            </summary>
        </member>
        <member name="F:AscensionServer.ApplicationBuilder.MapResourceRefreshInterval">
            <summary>
            地图资源刷新周期；
            以秒计算；
            </summary>
        </member>
        <member name="F:AscensionServer.ApplicationBuilder.TICKRATE">
            <summary>
            服务器帧数；
            换算成毫秒1000/tick;
            </summary>
        </member>
        <member name="F:AscensionServer.ApplicationBuilder._MSPerTick">
            <summary>
            每个tick所持续的毫秒；
            </summary>
        </member>
        <member name="M:AscensionServer.AscensionPeer.SendMessage(Protocol.OperationData)">
            <summary>
            发送消息到remotePeer
            </summary>
        </member>
        <!-- 对于成员“M:AscensionServer.AscensionPeer.SendEventMsg(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})”忽略有格式错误的 XML 注释 -->
        <member name="M:AscensionServer.AscensionPeer.OnMessage(System.Object,Photon.SocketServer.SendParameters)">
            <summary>
            接收到客户端消息；
            </summary>
        </member>
        <member name="M:AscensionServer.Handler.OnInitialization">
            <summary>
            非空虚函数
            </summary>
        </member>
        <member name="M:AscensionServer.Handler.OnTermination">
            <summary>
            非空虚函数
            </summary>
        </member>
        <member name="T:AscensionServer.SubHandler">
            <summary>
            子操作处理者
            </summary>
        </member>
        <member name="F:AscensionServer.SubHandler.operationResponse">
            <summary>
            操作返回数据
            </summary>
        </member>
        <member name="F:AscensionServer.SubHandler.subResponseParameters">
            <summary>
            子操作码的返回数据字典
            </summary>
        </member>
        <member name="M:AscensionServer.SubHandler.EncodeMessage(Photon.SocketServer.OperationRequest)">
            <summary>
            编码消息；
            </summary>
            <param name="operationRequest">请求进来的数据</param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.SubHandler.SetResponseParamters(System.Action)">
            <summary>
            设置返回数据
            </summary>
            <param name="callBack">在回调中设置数据</param>
        </member>
        <member name="M:AscensionServer.HeartBeatHandler.OnOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
            服务器心跳检测处理者
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.Actor">
            <summary>
            An actor is the glue between <see cref="!:LitePeer"/> and <see cref="T:AscensionServer.Lite.Room"/>.
            In addition to the peer it has a <see cref="P:AscensionServer.Lite.Actor.ActorNr">number</see> and <see cref="P:AscensionServer.Lite.Actor.Properties"/>.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.Actor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.Actor"/> class.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.Actor.#ctor(Photon.SocketServer.PeerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.Actor"/> class.
            </summary>
            <param name="peer">
            The peer for this actor.
            </param>
        </member>
        <member name="P:AscensionServer.Lite.Actor.ActorNr">
            <summary>
            Gets or sets the actor nr.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Actor.Peer">
            <summary>
            Gets or sets the peer.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Actor.Properties">
            <summary>
            Gets the actors custom properties.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.ActorCollection">
            <summary>
            A collection for <see cref="T:AscensionServer.Lite.Actor"/>s.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.ActorCollection.GetActorByNumber(System.Int32)">
            <summary>
            Gets an actor by the actor number.
            </summary>
            <param name="actorNumber">
            The actor number.
            </param>
            <returns>
            Return the actor with the specified actor number if found.
            If no actor with the specified actor number exits null will be returned.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.ActorCollection.GetActorByPeer(Photon.SocketServer.PeerBase)">
            <summary>
            Gets an actor by a specified peer.
            </summary>
            <param name="peer">
            The peer.
            </param>
            <returns>
            Returns the actor for the specified peer or null 
            if no actor for the specified peer was found.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.ActorCollection.GetActorNumbers">
            <summary>
            Gets the actor numbers of all actors in this instance as an array.
            </summary>
            <returns>
            Array of the actor numbers.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.ActorCollection.GetExcludedList(AscensionServer.Lite.Actor)">
            <summary>
            Gets a list of actors in the room exluding a specified actor.
            This method can be used to get the actor list for an event, 
            where the actor causing the event should not be notified.
            </summary>
            <param name="actorToExclude">
            The actor to exclude.
            </param>
            <returns>
            the actors without <paramref name="actorToExclude"/>
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.ActorCollection.RemoveActorByPeer(AscensionServer.AscensionPeer)">
            <summary>
            Removes the actor for a a specified peer.
            </summary>
            <param name="peer">
            The peer.
            </param>
            <returns>
            The <see cref="T:AscensionServer.Lite.Actor"/> removed or <c>null</c> if no actor for the specified peer exists.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.ActorCollection.GetActorsByNumbers(System.Int32[])">
            <summary>
            Returns all actors with the given actor numbers.
            </summary>
            <param name="actors">
            The actor numbers.
            </param>
            <returns>
            The actors with the given actor numbers.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.ActorCollection.IsSorted(System.Int32[])">
            <summary>
            Checks whether an array is sorted.
            </summary>
            <param name="array">
            The array.
            </param>
            <returns>
            True if the array is sorted, otherwise false.
            </returns>
        </member>
        <member name="T:AscensionServer.Lite.EventCache">
            <summary>
            A cache for events that a stored for actors that join a game later.
            The key is the event code, the value the event content.
            The event cache is ordered by event code.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.EventCacheDictionary">
            <summary>
            Dictionary implementation to store <see cref="T:AscensionServer.Lite.EventCache"/> instances by actor number.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.LiteGameCache">
            <summary>
            The cache for <see cref="!:LiteGame"/>s.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.LiteGameCache.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.LiteGameCache.CreateRoom(System.String,System.Object[])">
            <summary>
            Creates a new <see cref="!:LiteGame"/>.
            </summary>
            <param name="roomId">
            The room id.
            </param>
            <param name="args">
            The args.
            </param>
            <returns>
            A new <see cref="!:LiteGame"/>
            </returns>
        </member>
        <member name="T:AscensionServer.Lite.RoomCacheBase">
            <summary>
            Base class for room caches.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.RoomCacheBase.log">
            <summary>
            An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.RoomCacheBase.RoomInstances">
            <summary>A Dictionary used to store room instances.</summary>
        </member>
        <member name="F:AscensionServer.Lite.RoomCacheBase.SyncRoot">
            <summary>used to syncronize acces to the cache.</summary>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.TryGetRoomWithoutReference(System.String,AscensionServer.Lite.Room@)">
            <summary>
            Tries to get room reference for a room with the specified id, without holding a reference to that room. 
            </summary>
            <param name="roomId">The room id.</param>
            <param name="room">The room, in case it exists.</param>
            <returns>
            True if the cache contains a room with the specified room id; otherwise, false.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.GetRoomReference(System.String,Photon.SocketServer.PeerBase,System.Object[])">
            <summary>
            Gets a room reference for a room with a specified id.
            If the room with the specified id does not exists, a new room will be created.
            </summary>
            <param name="roomName">
            The room id.
            </param>
            <param name="ownerPeer">
            The peer that holds this reference.
            </param>
            <param name="args">
            Optionally arguments used for room creation.
            </param>
            <returns>
            a <see cref="T:AscensionServer.Lite.RoomReference"/>
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.GetRoomNames">
            <summary>
            Returns the names of all rooms that are currently cached in this <see cref="T:AscensionServer.Lite.RoomCacheBase"/>.
            </summary>
            <returns>The list of room names.</returns>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.GetDebugString(System.String)">
            <summary>
            Gathers debug information about the specified room (actors, peers, references etc.). 
            </summary>
            <param name="roomName">The room name.</param>
            <returns>A string with debug information.</returns>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.TryCreateRoom(System.String,Photon.SocketServer.PeerBase,AscensionServer.Lite.RoomReference@,System.Object[])">
            <summary>
            Tries to create a new room.
            </summary>
            <param name="roomName">
            The room id.
            </param>
            <param name="ownerPeer">
            The peer that holds this reference.
            </param>
            <param name="roomReference">
            When this method returns true, contains a new <see cref="T:AscensionServer.Lite.RoomReference"/> for the room 
            with the specified room id; otherwise, set to null. 
            </param>
            <param name="args">
            Optionally arguments used for room creation.
            </param>
            <returns>
            False if the cache contains a room with the specified room id; otherwise, true.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.TryGetRoomReference(System.String,Photon.SocketServer.PeerBase,AscensionServer.Lite.RoomReference@)">
            <summary>
            Tries to get room reference for a room with the specified id. 
            </summary>
            <param name="roomId">
            The room id.
            </param>
            <param name="ownerPeer">
            The peer that holds this reference.
            </param>
            <param name="roomReference">
            When this method returns true, contains a new <see cref="T:AscensionServer.Lite.RoomReference"/> for the room 
            with the specified room id; otherwise, set to null. 
            </param>
            <returns>
            True if the cache contains a room with the specified room id; otherwise, false.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.ReleaseRoomReference(AscensionServer.Lite.RoomReference)">
            <summary>
            Releases a room reference. 
            The related room instance will be removed from the cache if 
            no more references to the room exists.
            </summary>
            <param name="roomReference">
            The room reference to relaease.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.TryRemoveRoomInstance(AscensionServer.Lite.Room)">
            <summary>
            Tries to remove a romm instance from the room cache. 
            The room will only be removed if there are no references to the romm instance left.
            </summary>
            <param name="room">
            The room to remove.
            </param>
            <returns>
            Returns true if the room was removed from the cache; otherwise false.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.CreateRoom(System.String,System.Object[])">
            <summary>
            Must be implementated by inheritors to create new room instances.
            This method is called when a room reference is requesteted for a
            room that does not exists in the cache.
            </summary>
            <param name="roomId">
            The room id.
            </param>
            <param name="args">
            Optionally arguments used for room creation.
            </param>
            <returns>
            a new room
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.OnRoomRemoved(AscensionServer.Lite.Room)">
            <summary>
            Invoked if the last reference for a room is released and the room was removed from the cache. 
            Can be overloaded by inheritors to provide a custom cleanup logic after a room has been disposed. 
            </summary>
            <param name="room">The <see cref="T:AscensionServer.Lite.Room"/> that was removed from the cache.</param>
        </member>
        <member name="T:AscensionServer.Lite.RoomCacheBase.RoomInstance">
            <summary>
            Used to track references for a room instance.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.RoomCacheBase.RoomInstance.references">
            <summary>
            The references.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.RoomCacheBase.RoomInstance.roomFactory">
            <summary>
            The room factory.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.RoomInstance.#ctor(AscensionServer.Lite.RoomCacheBase,AscensionServer.Lite.Room)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.RoomCacheBase.RoomInstance"/> class.
            </summary>
            <param name="roomFactory">
            The room factory.
            </param>
            <param name="room">
            The room.
            </param>
        </member>
        <member name="P:AscensionServer.Lite.RoomCacheBase.RoomInstance.ReferenceCount">
            <summary>
            Gets the number of references for the room instance.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.RoomCacheBase.RoomInstance.Room">
            <summary>
            Gets the room.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.RoomInstance.AddReference(Photon.SocketServer.PeerBase)">
            <summary>
            Adds a reference to the room instance.
            </summary>
            <param name="ownerPeer">
            The peer that holds this reference.
            </param>
            <returns>
            a new <see cref="T:AscensionServer.Lite.RoomReference"/>
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.RoomCacheBase.RoomInstance.ReleaseReference(AscensionServer.Lite.RoomReference)">
            <summary>
            Releases a reference from this instance.
            </summary>
            <param name="reference">
            The room reference.
            </param>
        </member>
        <member name="T:AscensionServer.Lite.RoomReference">
            <summary>
            Used to observe references to room instances from a room cache.
            A reference to a room should be released (disposed) if it is not
            longer needed. The related cache observes the number of references
            to a room and removes a room if it has no references left. 
            </summary>
            <remarks>
            In the Lite application the room reference will be stored in a 
            peers state property whern the peer joines a room. When a 
            peer leaves a room the reference to the room will be disposed.
            This pattern ensures that room/game instances will not be 
            disposed if there are still peers/clients holding a reference 
            to the room/game.
            </remarks>
        </member>
        <member name="F:AscensionServer.Lite.RoomReference.id">
            <summary>
            The id.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.RoomReference.roomCache">
            <summary>
            The room cache.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.RoomReference.#ctor(AscensionServer.Lite.RoomCacheBase,AscensionServer.Lite.Room,Photon.SocketServer.PeerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.RoomReference"/> class.
            </summary>
            <param name="roomCache">
            The room cache.
            </param>
            <param name="room">
            The room.
            </param>
            <param name="ownerPeer">
            An <see cref="T:Photon.SocketServer.PeerBase"/> instance which obtained the room reference.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.RoomReference.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:AscensionServer.Lite.RoomReference"/> class. 
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:AscensionServer.Lite.RoomReference"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.RoomReference.Id">
            <summary>
            Gets the unique id for this instance.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.RoomReference.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AscensionServer.Lite.RoomReference.Room">
            <summary>
            Gets or sets the room of this reference.
            </summary>
            <value>The room.</value>
        </member>
        <member name="M:AscensionServer.Lite.RoomReference.Dispose">
            <summary>
            Removes the room reference from the associated room cache.
            The related room instance will be removed from the cache if 
            no more references to the room exists.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.RoomReference.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:AscensionServer.Lite.Property`1">
            <summary>
            The property.
            </summary>
            <typeparam name="TKey">
            The property key type.
            </typeparam>
        </member>
        <member name="F:AscensionServer.Lite.Property`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.Property`1.#ctor(`0,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.Property`1"/> class.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="E:AscensionServer.Lite.Property`1.PropertyChanged">
            <summary>
            The property changed.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Property`1.Key">
            <summary>
            Gets Key.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Property`1.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.Property`1.RaisePropertyChanged">
            <summary>
            Invokes the <see cref="E:AscensionServer.Lite.Property`1.PropertyChanged"/> event. 
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.PropertyBag`1">
            <summary>
            The property bag.
            </summary>
            <typeparam name="TKey">
            The property key type
            </typeparam>
        </member>
        <member name="F:AscensionServer.Lite.PropertyBag`1.dictionary">
            <summary>
            The dictionary.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.PropertyBag`1"/> class.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.PropertyBag`1"/> class.
            </summary>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.PropertyBag`1"/> class.
            </summary>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="E:AscensionServer.Lite.PropertyBag`1.PropertyChanged">
            <summary>
            The property changed event.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.PropertyBag`1.Count">
            <summary>
            Gets the number of properties in this instance.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.GetAll">
            <summary>
            The get all.
            </summary>
            <returns>
            A list of all properties
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.GetProperties">
            <summary>
            Get all properties.
            </summary>
            <returns>
            A copy of all properties with keys
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.GetProperties(System.Collections.Generic.IList{`0})">
            <summary>
            The get properties.
            </summary>
            <param name="propertyKeys">
            The property keys.
            </param>
            <returns>
            The values for the given <paramref name="propertyKeys"/>
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.GetProperties(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            The get properties.
            </summary>
            <param name="propertyKeys">
            The property keys.
            </param>
            <returns>
            The values for the given <paramref name="propertyKeys"/>
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.GetProperties(System.Collections.IEnumerable)">
            <summary>
            The get properties.
            </summary>
            <param name="propertyKeys">
            The property keys.
            </param>
            <returns>
            The values for the given <paramref name="propertyKeys"/>
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.GetProperty(`0)">
            <summary>
            The get property.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The value for the <paramref name="key"/>.
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.Set(`0,System.Object)">
            <summary>
            The set.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.SetProperties(System.Collections.IDictionary)">
            <summary>
            The set properties.
            </summary>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.SetProperties(System.Collections.Generic.IDictionary{`0,System.Object})">
            <summary>
            The set properties.
            </summary>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.CopyPropertiesToHashtable(System.Collections.IDictionary)">
            <summary>
            The copy properties to hashtable.
            </summary>
            <param name="hashtable">
            The hashtable.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.CopyPropertiesToHashtable(System.Collections.IDictionary,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            The copy properties to hashtable.
            </summary>
            <param name="hashtable">
            The hashtable.
            </param>
            <param name="propertyKeys">
            The property keys.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.CopyPropertiesToHashtable(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            The copy properties to hashtable.
            </summary>
            <param name="hashtable">
            The hashtable.
            </param>
            <param name="propertyKeys">
            The property keys.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.OnPropertyPropertyChanged(System.Object,System.EventArgs)">
            <summary>
            The on property property changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.PropertyBag`1.RaisePropertyChanged(`0,System.Object)">
            <summary>
            The raise property changed.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:AscensionServer.Lite.PropertyChangedEventArgs`1">
            <summary>
            The property changed event args.
            </summary>
            <typeparam name="TKey">
            The property key type.
            </typeparam>
        </member>
        <member name="M:AscensionServer.Lite.PropertyChangedEventArgs`1.#ctor(`0,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.PropertyChangedEventArgs`1"/> class. 
            </summary>
            <param name="key">
            The property key.
            </param>
            <param name="value">
            The property value.
            </param>
        </member>
        <member name="P:AscensionServer.Lite.PropertyChangedEventArgs`1.Key">
            <summary>
            Gets the key of the changed property.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.PropertyChangedEventArgs`1.Value">
            <summary>
            Gets the value of the changed property.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.CustomEvent">
            <summary>
            Implementation of a custom event.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.CustomEvent.#ctor(System.Int32,System.Byte,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.CustomEvent"/> class.
            </summary>
            <param name="actorNr">
            The actor nr.
            </param>
            <param name="eventCode">
            The event code.
            </param>
            <param name="data">
            The event data.
            </param>
        </member>
        <member name="P:AscensionServer.Lite.CustomEvent.Data">
            <summary>
            Gets or sets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="T:AscensionServer.Lite.JoinEvent">
            <summary>
            This class implements the Join event.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.JoinEvent.#ctor(System.Int32,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.JoinEvent"/> class.
            </summary>
            <param name="actorNr">
            The sender actor nr.
            </param>
            <param name="actors">
            The actors in the game.
            </param>
        </member>
        <member name="P:AscensionServer.Lite.JoinEvent.ActorProperties">
            <summary>
            Gets or sets the actor properties of the joined actor.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.JoinEvent.Actors">
            <summary>
            Gets or sets the actors in the game.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.LeaveEvent">
            <summary>
            This class implements the Leave event.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.LeaveEvent.#ctor(System.Int32,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.LeaveEvent"/> class.
            </summary>
            <param name="actorNr">
            The sender actor nr.
            </param>
            <param name="actors">
            The actors in the game.
            </param>
        </member>
        <member name="P:AscensionServer.Lite.LeaveEvent.Actors">
            <summary>
            Gets or sets the actors.
            </summary>
            <value>The actors.</value>
        </member>
        <member name="T:AscensionServer.Lite.LiteEventBase">
            <summary>
            Base class implementation for all Lite events.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.LiteEventBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.LiteEventBase"/> class. 
            </summary>
            <param name="actorNr">
            Actor number.
            </param>
        </member>
        <member name="P:AscensionServer.Lite.LiteEventBase.ActorNr">
            <summary>
            Gets or sets the actor number of the sender.
            </summary>
            <value>The actor nr.</value>
        </member>
        <member name="P:AscensionServer.Lite.LiteEventBase.Code">
            <summary>
            Gets or sets the event code.
            </summary>
            <value>The event code.</value>
        </member>
        <member name="T:AscensionServer.Lite.PropertiesChangedEvent">
            <summary>
            Implementation if the PropertiesChanged event.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.PropertiesChangedEvent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.PropertiesChangedEvent"/> class.
            </summary>
            <param name="actorNumber">
            The actor number.
            </param>
        </member>
        <member name="P:AscensionServer.Lite.PropertiesChangedEvent.Properties">
            <summary>
            Gets or sets Properties.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.PropertiesChangedEvent.TargetActorNumber">
            <summary>
            Gets or sets the number of the actor whos properties have been changed.
            A value of 0 indactes that game properties have been changed.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.FightCache">
            <summary>
            战斗的缓存层
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.FightCache.uidRoomIDict">
            <summary>
            用户id 对应的 房间id
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.FightCache.idRoomDict">
            <summary>
            房间id  对应的  房间模型对象
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.FightCache.roomQueue">
            <summary>
            重用房间队列
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.FightCache.roomId">
            <summary>
            房间的id
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.FightCache.Create(System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            创建战斗房间
            </summary>
            <param name="uidSet"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.FightCache.GetRoom(System.Int32)">
            <summary>
            获取房间
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.FightCache.IsFighting(System.Int32)">
            <summary>
            是否存在当前房间的id
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.FightCache.GetRoomByUId(System.Int32)">
            <summary>
            根据用户id获取所在的房间
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.FightCache.Destroy(AscensionServer.Lite.FightRoom)">
            <summary>
            摧毁房间
            </summary>
            <param name="room"></param>
        </member>
        <member name="T:AscensionServer.Lite.FightRoom">
            <summary>
            战斗房间
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.FightRoom.Id">
            <summary>
            房间唯一标识码
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.FightRoom.PlayerSet">
            <summary>
            存储所有玩家
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.FightRoom.LeaveUIdSet">
            <summary>
            中途退出的玩家id列表
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.FightRoom.#ctor(System.Int32,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            回合管理类
            </summary>
            <summary>
            做初始化
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.FightRoom.GetFirstUId">
            <summary>
            获取房间内第一个玩家的id
            </summary>
            <returns></returns>
        </member>
        <member name="T:AscensionServer.Lite.MatchCache">
            <summary>
            匹配缓存层
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.MatchCache.uidRoomDict">
            <summary>
            正在等待的  用户id 和  房间id 的映射
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.MatchCache.idModelDict">
            <summary>
            正在等待的 房间 id  和 房间的数据模型  的映射
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.MatchCache.roomQueue">
            <summary>
            重用是房间队列
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.MatchCache.id">
            <summary>
            房间 的id
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.MatchCache.Enter(System.Int32,AscensionServer.AscensionPeer)">
            <summary>
            进入匹配队列  进入匹配房间
            </summary>
            <param name="userId"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.MatchCache.Leave(System.Int32)">
            <summary>
            离开匹配房间
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.MatchCache.IsMatching(System.Int32)">
            <summary>
            用户是否在匹配房间内
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.MatchCache.GetRoom(System.Int32)">
            <summary>
            获取玩家所在的等待房间
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.MatchCache.Destroy(AscensionServer.Lite.MatchRoom)">
            <summary>
            销毁房间
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.MatchRoom">
            <summary>
            匹配房间
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.MatchRoom.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.MatchRoom.UIdClientDict">
            <summary>
            在房间内用户id的列表  和  链接对象的 映射关系
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.MatchRoom.ReadyUIdSet">
            <summary>
            匹配中玩家的id列表
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.MatchRoom.IsFull">
            <summary>
            房间是否满了
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.MatchRoom.IsEmpty">
            <summary>
            房间是否空了
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.MatchRoom.IsAllReady">
            <summary>
            房间中的玩家是否都在匹配中
            </summary>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.Lite.MatchRoom.Enter(System.Int32,AscensionServer.AscensionPeer)">
            <summary>
            进入房间
            </summary>
            <param name="usrId"></param>
            <param name="client"></param>
        </member>
        <member name="M:AscensionServer.Lite.MatchRoom.Leave(System.Int32)">
            <summary>
            离开房间
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:AscensionServer.Lite.MatchRoom.Ready(System.Int32)">
            <summary>
            玩家开始匹配
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:AscensionServer.Lite.MatchRoom.Brocast">
            <summary>
            广播房间内的所有玩家信息
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.GameMessageCodes">
            <summary>
            GameMessagCodes define the type of a "LiteGame" Message, the meaning and its content.
            Messages are used to communicate async with rooms and games.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.GameMessageCodes.Operation">
            <summary>
            Message is an operatzion.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.GameMessageCodes.RemovePeerFromGame">
            <summary>
            Message to remove peer from game.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.IMessage">
            <summary>
            Interface of a message.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.IMessage.Action">
            <summary>
            Gets the action.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.IMessage.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.RoomMessage">
            <summary>
            Represents a message for rooms.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.RoomMessage.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.RoomMessage"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:AscensionServer.Lite.RoomMessage.#ctor(System.Byte,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.RoomMessage"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:AscensionServer.Lite.RoomMessage.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:AscensionServer.Lite.RoomMessage.Action">
            <summary>
            Gets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:AscensionServer.Lite.CacheOperation">
            <summary>
              Parameter value of RaiseEventRequest.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.CacheOperation.DoNotCache">
            <summary>
              Don't cache the event. (default)
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.CacheOperation.MergeCache">
            <summary>
              Merge cached event with data.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.CacheOperation.ReplaceCache">
            <summary>
              Replace cached event with data.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.CacheOperation.RemoveCache">
            <summary>
              Remove cached event.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.CacheOperation.AddToRoomCache">
            <summary>
            Add to the room cache.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.ChangeGroups.Remove">
            <summary>
            Gets or sets custom actor properties.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.NewEventCode">
            <summary>
              Event codes of events (defining their type and keys).
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewEventCode.NoCodeSet">
            <summary>
              Specifies that no event code is set.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewEventCode.Join">
            <summary>
              The event code for the <see cref="T:AscensionServer.Lite.JoinEvent"/>.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewEventCode.Leave">
            <summary>
              The event code for the <see cref="T:AscensionServer.Lite.LeaveEvent"/>.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewEventCode.PropertiesChanged">
            <summary>
              The event code for the <see cref="T:AscensionServer.Lite.PropertiesChangedEvent"/>.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.GetPropertiesRequest">
            <summary>
              The get properties request.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.GetPropertiesRequest.#ctor(Photon.SocketServer.IRpcProtocol,Photon.SocketServer.OperationRequest)">
            <summary>
              Initializes a new instance of the <see cref = "T:AscensionServer.Lite.GetPropertiesRequest" /> class.
            </summary>
            <param name = "protocol">
              The protocol.
            </param>
            <param name = "operationRequest">
              Operation request containing the operation parameters.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.GetPropertiesRequest.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:AscensionServer.Lite.GetPropertiesRequest" /> class.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.GetPropertiesRequest.ActorNumbers">
            <summary>
              Gets or sets the actor numbers for which to get the properties.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.GetPropertiesRequest.ActorPropertyKeys">
            <summary>
              Gets or sets ActorPropertyKeys.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.GetPropertiesRequest.GamePropertyKeys">
            <summary>
              Gets or sets GamePropertyKeys.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.GetPropertiesRequest.PropertyType">
            <summary>
              Gets or sets PropertyType.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.GetPropertiesResponse">
            <summary>
              Response for <see cref = "T:AscensionServer.Lite.GetPropertiesRequest" />.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.GetPropertiesResponse.ActorProperties">
            <summary>
              Gets or sets ActorProperties.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.GetPropertiesResponse.GameProperties">
            <summary>
              Gets or sets GameProperties.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.JoinRequest">
            <summary>
            This class implements the Join operation.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.JoinRequest.#ctor(Photon.SocketServer.IRpcProtocol,Photon.SocketServer.OperationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.JoinRequest"/> class.
            </summary>
            <param name="protocol">
            The protocol.
            </param>
            <param name="operationRequest">
            Operation request containing the operation parameters.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.JoinRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.JoinRequest"/> class.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.JoinRequest.ActorProperties">
            <summary>
            Gets or sets custom actor properties.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.JoinRequest.BroadcastActorProperties">
            <summary>
            Gets or sets a value indicating whether the actor properties
            should be included in the <see cref="T:AscensionServer.Lite.JoinEvent"/> event which 
            will be sent to all clients currently in the room.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.JoinRequest.GameId">
            <summary>
            Gets or sets the name of the game (room).
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.JoinRequest.GameProperties">
            <summary>
            Gets or sets custom game properties.
            </summary>
            <remarks>
            Game properties will only be applied for the game creator.
            </remarks>
        </member>
        <member name="P:AscensionServer.Lite.JoinRequest.DeleteCacheOnLeave">
            <summary>
            Gets or sets a value indicating whether cached events are automaticly deleted for 
            actors which are leaving a room.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.JoinRequest.SuppressRoomEvents">
            <summary>
            Gets or sets a value indicating if common room events (Join, Leave) will be suppressed.
            </summary>
            <remarks>
            This property will only be applied for the game creator.
            </remarks>
        </member>
        <member name="P:AscensionServer.Lite.JoinRequest.ActorNr">
            <summary>
            Actor number, which will be used for rejoin
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.JoinResponse">
            <summary>
              Response for <see cref = "T:AscensionServer.Lite.JoinRequest" />.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.JoinResponse.ActorNr">
            <summary>
              Gets or sets the actor number for the joined player.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.JoinResponse.CurrentActorProperties">
            <summary>
              Gets or sets the current actor properties for all existing actors in the game
              that will be returned to the client in the operation response.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.JoinResponse.CurrentGameProperties">
            <summary>
              Gets or sets the current game properties that will be returned 
              to the client in the operation response.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.LeaveRequest">
            <summary>
            Implements the Leave operation.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.LeaveRequest.#ctor(Photon.SocketServer.IRpcProtocol,Photon.SocketServer.OperationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.LeaveRequest"/> class.
            </summary>
            <param name="protocol">
            The protocol.
            </param>
            <param name="operationRequest">
            Operation request containing the operation parameters.
            </param>
        </member>
        <member name="T:AscensionServer.Lite.NewOperationCode">
            <summary>
              Defines the operation codes used by the Lite application.
              These codes match events (in parts).
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewOperationCode.Join">
            <summary>
              The operation code for the <see cref="T:AscensionServer.Lite.JoinRequest">join</see> operation.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewOperationCode.Leave">
            <summary>
              Operation code for the <see cref="T:AscensionServer.Lite.LeaveRequest">leave</see> operation.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewOperationCode.RaiseEvent">
            <summary>
              Operation code for the <see cref="T:AscensionServer.Lite.RaiseEventRequest">raise event</see> operation.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewOperationCode.SetProperties">
            <summary>
              Operation code for the <see cref="T:AscensionServer.Lite.SetPropertiesRequest">set properties</see> operation.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewOperationCode.GetProperties">
            <summary>
              Operation code for the <see cref="T:AscensionServer.Lite.GetPropertiesRequest">get properties</see> operation.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.NewOperationCode.Ping">
            <summary>
              Operation code for the ping operation.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.ParameterKey">
            <summary>
              Parameter keys are used as event-keys, operation-parameter keys and operation-return keys alike.
              The values are partly taken from Exit Games Photon, which contains many more keys.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.GameId">
            <summary>
              The game id.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.ActorNr">
            <summary>
              The actor nr
              used as op-key and ev-key
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.TargetActorNr">
            <summary>
              The target actor nr.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.Actors">
            <summary>
              The actors.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.Properties">
            <summary>
              The properties.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.Broadcast">
            <summary>
              The broadcast.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.ActorProperties">
            <summary>
              The actor properties.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.GameProperties">
            <summary>
              The game properties.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.Cache">
            <summary>
              Event parameter to indicate whether events are cached for new actors.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.ReceiverGroup">
            <summary>
              Event parameter containing a <see cref="!:Lite.Operations.ReceiverGroup"/> value.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.Data">
            <summary>
              The data.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.Code">
            <summary>
              The paramter code for the <see cref="T:AscensionServer.Lite.RaiseEventRequest">raise event</see> operations event code.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.Flush">
            <summary>
              the flush event code for raise event.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.DeleteCacheOnLeave">
            <summary>
            Event parameter to indicate whether cached events are deleted automaticly for actors leaving a room.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.Group">
            <summary>
            The group this event should be sent to. No error is happening if the group is empty or not existing.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.GroupsForRemove">
            <summary>
            Groups to leave. Null won't remove any groups. byte[0] will remove ALL groups. Otherwise only the groups listed will be removed.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.GroupsForAdd">
            <summary>
            Groups to enter. Null won't add groups. byte[0] will add ALL groups. Otherwise only the groups listed will be added.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ParameterKey.SuppressRoomEvents">
            <summary>
            A parameter indicating if common room events (Join, Leave) will be suppressed.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.PropertyType">
            <summary>
              The property type.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.PropertyType.None">
            <summary>
              The none.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.PropertyType.Game">
            <summary>
              The game.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.PropertyType.Actor">
            <summary>
              The actor.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.PropertyType.GameAndActor">
            <summary>
              The game and actor.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.RaiseEventRequest">
            <summary>
              Implements the RaiseEvent operation.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.RaiseEventRequest.#ctor(Photon.SocketServer.IRpcProtocol,Photon.SocketServer.OperationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.RaiseEventRequest"/> class.
            </summary>
            <param name="protocol">
            The protocol.
            </param>
            <param name="operationRequest">
            Operation request containing the operation parameters.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.RaiseEventRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.RaiseEventRequest"/> class.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.RaiseEventRequest.Actors">
            <summary>
              Gets or sets the actors which should receive the event.
              If set to null or an empty array the event will be sent
              to all actors in the room.
            </summary>
            <remarks>
              Optional request parameter.
            </remarks>
        </member>
        <member name="P:AscensionServer.Lite.RaiseEventRequest.Cache">
            <summary>
              Gets or sets a value indicating how to use the <see cref = "T:AscensionServer.Lite.EventCache" />.
            </summary>
            <remarks>
              Optional request parameter.
              Ignored if the event is sent to individual actors (submitted <see cref = "P:AscensionServer.Lite.RaiseEventRequest.Actors" /> or <see cref = "!:Lite.Operations.ReceiverGroup.MasterClient" />).
            </remarks>
        </member>
        <member name="P:AscensionServer.Lite.RaiseEventRequest.Data">
            <summary>
              Gets or sets the hashtable containing the data to send.
            </summary>
            <remarks>
              Optional request parameter.
            </remarks>
        </member>
        <member name="P:AscensionServer.Lite.RaiseEventRequest.EvCode">
            <summary>
              Gets or sets a byte containing the Code to send.
            </summary>
            <remarks>
              Optional request parameter.
            </remarks>
        </member>
        <member name="P:AscensionServer.Lite.RaiseEventRequest.Flush">
            <summary>
              Gets or sets a value indicating whether to flush the send queue.
              Flushing the send queue will override the configured photon send delay.
            </summary>
            <remarks>
              Optional request parameter.
            </remarks>
        </member>
        <member name="P:AscensionServer.Lite.RaiseEventRequest.GameId">
            <summary>
              Gets or sets the game id.
            </summary>
            <remarks>
              Optional request parameter.
            </remarks>
        </member>
        <member name="P:AscensionServer.Lite.RaiseEventRequest.ReceiverGroup">
            <summary>
              Gets or sets the <see cref = "!:Lite.Operations.ReceiverGroup" /> for the event.
            </summary>
            <remarks>
              Optional request parameter.
              Ignored if <see cref = "P:AscensionServer.Lite.RaiseEventRequest.Actors" /> are set.
            </remarks>
        </member>
        <member name="P:AscensionServer.Lite.RaiseEventRequest.Group">
            <summary>
              Gets or sets the <see cref = "!:Lite.Operations.ReceiverGroup" /> for the event.
            </summary>
            <remarks>
              Optional request parameter.
              Ignored if <see cref = "P:AscensionServer.Lite.RaiseEventRequest.Actors" /> are set.
            </remarks>
        </member>
        <member name="T:AscensionServer.Lite.ReceiverGroup">
            <summary>
              Possible groups of receivers for events.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ReceiverGroup.Others">
            <summary>
              Send to all actors but the sender.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ReceiverGroup.All">
            <summary>
              Send to all actors including the sender.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.ReceiverGroup.MasterClient">
            <summary>
              Send to the peer with the lowest actor number.
            </summary>
        </member>
        <member name="T:AscensionServer.Lite.SetPropertiesRequest">
            <summary>
            The set properties operation.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.SetPropertiesRequest.#ctor(Photon.SocketServer.IRpcProtocol,Photon.SocketServer.OperationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.SetPropertiesRequest"/> class.
            </summary>
            <param name="protocol">
            The protocol.
            </param>
            <param name="operationRequest">
            Operation request containing the operation parameters.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.SetPropertiesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AscensionServer.Lite.SetPropertiesRequest"/> class.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.SetPropertiesRequest.ActorNumber">
            <summary>
            Gets or sets ActorNumber.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.SetPropertiesRequest.Broadcast">
            <summary>
            Gets or sets a value indicating whether Broadcast.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.SetPropertiesRequest.Properties">
            <summary>
            Gets or sets Properties.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.Room.Log">
            <summary>
              An <see cref = "T:ExitGames.Logging.ILogger" /> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="F:AscensionServer.Lite.Room.name">
            <summary>
              The room name.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.Room.#ctor(System.String,AscensionServer.Lite.RoomCacheBase,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:AscensionServer.Lite.Room" /> class without a room name.
            </summary>
            <param name = "name">
              The room name.
            </param>
            <param name="roomCache">
              The <see cref="T:AscensionServer.Lite.RoomCacheBase"/> instance to which the room belongs.
            </param>
            <param name="emptyRoomLiveTime">
              A value indicating how long the room instance will be keeped alive 
              in the room cache after all peers have left the room.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.Room.#ctor(System.String,ExitGames.Concurrency.Fibers.PoolFiber,AscensionServer.Lite.RoomCacheBase,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:AscensionServer.Lite.Room" /> class.
            </summary>
            <param name = "name">
              The room name.
            </param>
            <param name = "executionFiber">
              The execution fiber used to synchronize access to this instance.
            </param>
            <param name="roomCache">
              The <see cref="T:AscensionServer.Lite.RoomCacheBase"/> instance to which the room belongs.
            </param>
            <param name="emptyRoomLiveTime">
              A value indicating how long the room instance will be keeped alive 
              in the room cache after all peers have left the room.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.Room.Finalize">
            <summary>
              Finalizes an instance of the <see cref = "T:AscensionServer.Lite.Room" /> class. 
              This destructor will run only if the Dispose method does not get called.
              It gives your base class the opportunity to finalize.
              Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Room.ExecutionFiber">
            <summary>
              Gets a <see cref = "T:ExitGames.Concurrency.Fibers.PoolFiber" /> instance used to synchronize access to this instance.
            </summary>
            <value>A <see cref = "T:ExitGames.Concurrency.Fibers.PoolFiber" /> instance.</value>
        </member>
        <member name="P:AscensionServer.Lite.Room.IsDisposed">
            <summary>
              Gets a value indicating whether IsDisposed.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Room.Name">
            <summary>
              Gets the name (id) of the room.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Room.EmptyRoomLiveTime">
            <summary>
            Gets or sets a value indicating how long the room instance will be keeped alive 
            in the room cache after all peers have left the room.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Room.RemoveTimer">
            <summary>
            Timer for removing room
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Room.Properties">
            <summary>
              Gets a PropertyBag instance used to store custom room properties.
            </summary>
        </member>
        <member name="P:AscensionServer.Lite.Room.Actors">
            <summary>
              Gets an <see cref = "T:AscensionServer.Lite.ActorCollection" /> containing the actors in the room
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.Room.BeforeRemoveFromCache">
            <summary>
            Called by the <see cref="T:AscensionServer.Lite.RoomCacheBase"/> if the room is about to be removed from the cache.
            </summary>
            <returns>
            True if the room should be automaticly by removed by the <see cref="T:AscensionServer.Lite.RoomCacheBase"/>.
            False if the room has an custom remove implementation and will remove itself from the cache.
            </returns>
            <remarks>
            The default implementation checks if the EmptyRoomLiveTime value is set to a value greater zero.
            If it's set the method will return false to indicate that the cache should not remove this
            instance automaticly. The removal of the room is then scheduled using the <see cref="P:AscensionServer.Lite.Room.ExecutionFiber"/>.
            </remarks>
        </member>
        <member name="M:AscensionServer.Lite.Room.EnqueueMessage(AscensionServer.Lite.IMessage)">
            <summary>
              Enqueues an <see cref = "T:AscensionServer.Lite.IMessage" /> to the end of the execution queue.
            </summary>
            <param name = "message">
              The message to enqueue.
            </param>
            <remarks>
              <see cref = "M:AscensionServer.Lite.Room.ProcessMessage(AscensionServer.Lite.IMessage)" /> is called sequentially for each operation request 
              stored in the execution queue.
              Using an execution queue ensures that messages are processed in order
              and sequentially to prevent object synchronization (multi threading).
            </remarks>
        </member>
        <member name="M:AscensionServer.Lite.Room.EnqueueOperation(AscensionServer.AscensionPeer,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Enqueues an <see cref = "T:Photon.SocketServer.OperationRequest" /> to the end of the execution queue.
            </summary>
            <param name = "peer">
              The peer.
            </param>
            <param name = "operationRequest">
              The operation request to enqueue.
            </param>
            <param name = "sendParameters">
              The send Parameters.
            </param>
            <remarks>
              <see cref = "M:AscensionServer.Lite.Room.ExecuteOperation(AscensionServer.AscensionPeer,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)" /> is called sequentially for each operation request 
              stored in the execution queue.
              Using an execution queue ensures that operation request are processed in order
              and sequentially to prevent object synchronization (multi threading).
            </remarks>
        </member>
        <member name="M:AscensionServer.Lite.Room.ScheduleMessage(AscensionServer.Lite.IMessage,System.Int64)">
            <summary>
              Schedules a message to be processed after a specified time.
            </summary>
            <param name = "message">
              The message to schedule.
            </param>
            <param name = "timeMs">
              The time in milliseconds to wait before the message will be processed.
            </param>
            <returns>
              an <see cref = "T:System.IDisposable" />
            </returns>
        </member>
        <member name="M:AscensionServer.Lite.Room.Dispose">
            <summary>
              Releases resources used by this instance.
            </summary>
        </member>
        <member name="M:AscensionServer.Lite.Room.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            <param name = "dispose">
              <c>true</c> to release both managed and unmanaged resources; 
              <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.Room.ExecuteOperation(AscensionServer.AscensionPeer,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              This method is invoked sequentially for each operation request 
              enqueued in the <see cref = "P:AscensionServer.Lite.Room.ExecutionFiber" /> using the 
              <see cref = "M:AscensionServer.Lite.Room.EnqueueOperation(AscensionServer.AscensionPeer,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)" /> method.
            </summary>
            <param name = "peer">
              The peer.
            </param>
            <param name = "operation">
              The operation request.
            </param>
            <param name = "sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.Room.ProcessMessage(AscensionServer.Lite.IMessage)">
            <summary>
              This method is invoked sequentially for each message enqueued 
              by the <see cref = "M:AscensionServer.Lite.Room.EnqueueMessage(AscensionServer.Lite.IMessage)" /> or <see cref = "M:AscensionServer.Lite.Room.ScheduleMessage(AscensionServer.Lite.IMessage,System.Int64)" />
              method.
            </summary>
            <param name = "message">
              The message to process.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.Room.PublishEvent(AscensionServer.Lite.LiteEventBase,AscensionServer.Lite.Actor,Photon.SocketServer.SendParameters)">
            <summary>
              Publishes an event to a single actor on a specified channel.
            </summary>
            <param name = "e">
              The event to publish.
            </param>
            <param name = "actor">
              The <see cref = "T:AscensionServer.Lite.Actor" /> who should receive the event.
            </param>
            <param name = "sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.Room.PublishEvent(AscensionServer.Lite.LiteEventBase,System.Collections.Generic.IEnumerable{AscensionServer.Lite.Actor},Photon.SocketServer.SendParameters)">
            <summary>
              Publishes an event to a list of actors on a specified channel.
            </summary>
            <param name = "e">
              The event to publish.
            </param>
            <param name = "actorList">
              A list of <see cref = "T:AscensionServer.Lite.Actor" /> who should receive the event.
            </param>
            <param name = "sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.Room.PublishEvent(Photon.SocketServer.EventData,System.Collections.Generic.IEnumerable{AscensionServer.Lite.Actor},Photon.SocketServer.SendParameters)">
            <summary>
              Publishes an event to a list of actors on a specified channel.
            </summary>
            <param name = "e">
              The event to publish.
            </param>
            <param name = "actorList">
              A list of <see cref = "T:AscensionServer.Lite.Actor" /> who should receive the event.
            </param>
            <param name = "sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.Room.ScheduleRoomRemoval(System.Int32)">
            <summary>
            Schedules the removal of the room instance from the cache.
            The room will be removed after the specified time if there are no room
            references left.
            </summary>
            <param name="roomLiveTime">
            The time to remove the room in milliseconds.
            </param>
        </member>
        <member name="M:AscensionServer.Lite.Room.TryRemoveRoomFromCache">
            <summary>
            Removes the room instance from the cache if there are no references to the instance left.
            </summary>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.Query``1(System.String,System.Object)">
            <summary>
            单条件查找；
            </summary>
            <typeparam name="T">需要的目标</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.Verify``1(System.String,System.Object)">
            <summary>
            单条件验证；
            </summary>
            <typeparam name="T">需要的目标</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>是否验证成功</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.Insert``1(``0)">
            <summary>
            可覆写非空虚函数;
            添加数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">具体数据</param>
            <returns>返回一个完整带有主键ID的对象</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.Get``1(System.Object)">
            <summary>
            可覆写非空虚函数;
            获取数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <typeparam name="K">查找类型</typeparam>
            <param name="key">查找索引字段</param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaSelect``1(AscensionServer.NHCriteria[])">
            <summary>
            可覆写非空虚函数;
            条件获得数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <typeparam name="columnName">表字段的名称</typeparam>
            <typeparam name="K">查找类型</typeparam>
            <param name="key">查找索引字段</param>
            <param name="key"></param>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaSelectList``1(AscensionServer.NHCriteria[])">
            <summary>
            条件查找符合的集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.Verify``1(AscensionServer.NHCriteria[])">
            <summary>
            多条件验证，SQL语句为Equal
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="columns">column类对象</param>
            <returns>验证是否成功</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.Count``1(AscensionServer.NHCriteria[])">
            <summary>
            查找并返回所有条件对象的总数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.Delete``1(``0)">
            <summary>
            可覆写非空虚函数;
            移除数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">具体数据</param>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.Update``1(``0)">
            <summary>
            可覆写非空虚函数;
            更新数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">具体数据</param>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.SaveOrUpdate``1(``0)">
            <summary>
            保存或更新数据
            </summary>
            <typeparam name="T">无参构造的数据类型</typeparam>
            <param name="data">数据对象</param>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaLike``1(AscensionServer.NHCriteria[])">
            <summary>
            多条件验证，SQL语句为Like
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="columns">column类对象</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaGt``1(AscensionServer.NHCriteria[])">
            <summary>
            多条件验证，SQL语句为greater than
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="columns">column类对象</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaLt``1(AscensionServer.NHCriteria[])">
            <summary>
            多条件验证，SQL语句为less than
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="columns">column类对象</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaLtProperty``1(System.String,System.String)">
            <summary>
            双参数验证，SQL语句为less than
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="propertyName">参数名</param>
            <param name="otherPropertyName">另一个参数名</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaNotEqProperty``1(System.String,System.String)">
            <summary>
             双参数验证，SQL语句为not；
             查询不符合参数的对象集合；
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="propertyName">参数名</param>
            <param name="otherPropertyName">另一个参数名</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaNot``1(NHibernate.Criterion.ICriterion)">
            <summary>
            Return the negation of an expression
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="expression">nhibernate表达式</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.InsertAsync``1(``0)">
            <summary>
            可覆写非空虚函数;
            添加数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">具体数据</param>
            <returns>返回一个完整带有主键ID的对象</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.GetAsync``1(System.Object)">
            <summary>
            可覆写非空虚函数;
            获取数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <typeparam name="K">查找类型</typeparam>
            <param name="key">查找索引字段</param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaSelectAsync``1(AscensionServer.NHCriteria[])">
            <summary>
            可覆写非空虚函数;
            条件获得数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <typeparam name="columnName">表字段的名称</typeparam>
            <typeparam name="K">查找类型</typeparam>
            <param name="key">查找索引字段</param>
            <param name="key"></param>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaSelectListAsync``1(AscensionServer.NHCriteria[])">
            <summary>
            条件查找符合的集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.VerifyAsync``1(AscensionServer.NHCriteria[])">
            <summary>
            多条件验证，SQL语句为Equal
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="columns">column类对象</param>
            <returns>验证是否成功</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CountAsync``1(AscensionServer.NHCriteria[])">
            <summary>
            查找并返回所有条件对象的总数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.DeleteAsync``1(``0)">
            <summary>
            可覆写非空虚函数;
            移除数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">具体数据</param>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.UpdateAsync``1(``0)">
            <summary>
            可覆写非空虚函数;
            更新数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">具体数据</param>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.SaveOrUpdateAsync``1(``0)">
            <summary>
            异步保存或更新数据
            </summary>
            <typeparam name="T">无参构造的数据类型</typeparam>
            <param name="data">数据对象</param>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaLikeAsync``1(AscensionServer.NHCriteria[])">
            <summary>
            多条件验证，SQL语句为Like
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="columns">column类对象</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaGtAsync``1(AscensionServer.NHCriteria[])">
            <summary>
            多条件验证，SQL语句为greater than
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="columns">column类对象</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaLtAsync``1(AscensionServer.NHCriteria[])">
            <summary>
            多条件验证，SQL语句为less than
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="columns">column类对象</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaLtPropertyAsync``1(System.String,System.String)">
            <summary>
            双参数验证，SQL语句为less than
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="propertyName">参数名</param>
            <param name="otherPropertyName">另一个参数名</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaNotEqPropertyAsync``1(System.String,System.String)">
            <summary>
             双参数验证，SQL语句为not；
             查询不符合参数的对象集合；
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="propertyName">参数名</param>
            <param name="otherPropertyName">另一个参数名</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="M:AscensionServer.NHibernateQuerier.CriteriaNotAsync``1(NHibernate.Criterion.ICriterion)">
            <summary>
            Return the negation of an expression
            </summary>
            <typeparam name="T">需要验证的类型</typeparam>
            <param name="expression">nhibernate表达式</param>
            <returns>查询到的对象集合</returns>
        </member>
        <member name="T:AscensionServer.NHCriteria">
            <summary>
            SQL Colum对应类，一个column对应一个传入数值
            </summary>
        </member>
        <member name="T:BattleSkillUseConditionType">
            <summary>
            战斗使用条件类型枚举
            </summary>
        </member>
        <member name="F:BattleSkillUseConditionType.UnRepeatSummon">
            <summary>
            不可重复召唤
            </summary>
        </member>
        <member name="F:BattleSkillUseConditionType.ReplaceSummon">
            <summary>
            覆盖召唤
            </summary>
        </member>
        <member name="F:BattleSkillUseConditionType.WeaponLimit">
            <summary>
            武器限定
            </summary>
        </member>
        <member name="T:BattleSkillTargetType">
            <summary>
            技能目标类型枚举
            </summary>
        </member>
        <member name="T:BattleSkillFactionType">
            <summary>
            技能阵营类型枚举
            </summary>
        </member>
        <member name="F:BattleSkillTriggerEventType.AddPierce">
            <summary>
            增加穿透
            </summary>
        </member>
        <member name="T:BattleSkillActionType">
            <summary>
            1.伤害
            2.回血
            3.复活
            4.召唤
            </summary>
        </member>
        <member name="T:JYGame.GenericDataStream`1">
            <summary>
            数据流对象
            </summary>
        </member>
        <member name="P:JYGame.GenericDataStream`1.CanWrite">
            <summary>
            是否正在写入数据；
            </summary>
        </member>
        <member name="P:JYGame.GenericDataStream`1.CanRead">
            <summary>
            是否正在读取数据；
            </summary>
        </member>
        <member name="F:JYGame.GenericDataStream`1.writeData">
            <summary>
            写入的数据；
            </summary>
        </member>
        <member name="F:JYGame.GenericDataStream`1.readData">
            <summary>
            读取的数据；
            </summary>
        </member>
        <member name="F:JYGame.GenericDataStream`1.pos">
             <summary>
             serial number
            当前 data序号
             </summary>
        </member>
        <member name="M:JYGame.GenericDataStream`1.SetReadStream(`0[],System.Int32)">
            <summary>
            设置读取的流
            </summary>
            <param name="incomingData">进入流的数据</param>
            <param name="pos">序列号</param>
        </member>
        <member name="M:JYGame.GenericDataStream`1.SetWriteStream(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            设置写入的流
            </summary>
            <param name="newWriteData">进入流的数据</param>
            <param name="pos">序列号</param>
        </member>
        <member name="M:JYGame.GenericDataStream`1.ReadNext">
            <summary>
            写入状态使用；
            顺序读取写入的下一个顺序；
            </summary>
            <returns>写入的下一个数据</returns>
        </member>
        <member name="M:JYGame.GenericDataStream`1.ToArray">
            <summary>
            获取接收到的数据数组；
            若写入状态，则获得写入的数据；
            若读取状态，则获得读取的数据；
            </summary>
            <returns>数据数组</returns>
        </member>
    </members>
</doc>
